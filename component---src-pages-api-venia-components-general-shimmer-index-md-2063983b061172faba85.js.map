{"version":3,"sources":["webpack://commerce-pwa-studio/./src/pages/api/venia/components/general/Shimmer/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uSASaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,WADR,YAIA,sSAEA,uOAQA,SAAC,IAAD,CAASA,QAAQ,aACjB,eACE,GAAM,0BADR,2BAGA,oEAAqD,uBAAYC,WAAW,KAAvB,QAArD,qFACF,eAAIA,WAAW,MAAI,mBAAQA,WAAW,MAAnB,YADjB,0FAEA,wCAAyB,uBAAYA,WAAW,KAAvB,WAAzB,sBAAkG,eAAIA,WAAW,KAAf,UAAlG,8GACkB,uBAAYA,WAAW,KAAvB,eADlB,0FACmK,uBAAYA,WAAW,KAAvB,YADnK,MAEA,eACE,GAAM,WADR,YAGA,mFACA,oBACE,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,WAApB,oHACA,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,yBAApB,6GACA,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,6BAApB,kCACA,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,wCAApB,OAAoG,uBAAYA,WAAW,MAAvB,eAApG,8MAGF,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,qaAwBL,qBACA,mBAAG,mBAAQA,WAAW,KAAnB,sCACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,oKAML,qBACA,mBAAG,mBAAQA,WAAW,KAAnB,6CACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,+nBA2BL,qBACA,mBAAG,mBAAQA,WAAW,KAAnB,qDACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,4tBA2BL,eACE,GAAM,+BADR,gCAGA,6OAEA,mBAAG,mBAAQA,WAAW,KAAnB,wBACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,irBAoBL,eACE,GAAM,iBADR,kBAGA,gFAAiE,uBAAYA,WAAW,KAAvB,uCAAjE,qGAEA,iDAAkC,uBAAYA,WAAW,KAAvB,wCAAlC,YAA8H,eAAIA,WAAW,KAAf,UAA9H,0CACA,eACE,GAAM,aADR,YAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,kJAgBTJ,EAAWK,gBAAiB","file":"component---src-pages-api-venia-components-general-shimmer-index-md-2063983b061172faba85.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Shimmer from '/src/data/auto-generated/venia-ui/lib/components/Shimmer/shimmer.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"shimmer\"\n    }}>{`Shimmer`}</h1>\n\n    <p>{`The Shimmer component is a loading indicator that takes the shape of the component being loaded.\nInstead of blocking the entire page like a traditional full-screen loader, Shimmer loaders are component-shape specific to show users previews of what's loading on the page.`}</p>\n    <p>{`These previews improves the perceived performance of the app and prevents CLS (Content Layout Shift).\nThe Shimmer component eliminates most of the CLS on a page, which helps improve Google Lighthouse scores.`}</p>\n    {\n      /*\n      The reference doc content is generated automatically from the source code.\n      To update this section, update the doc blocks in the source code\n      */\n    }\n    <Shimmer mdxType=\"Shimmer\" />\n    <h2 {...{\n      \"id\": \"shimmer-for-components\"\n    }}>{`Shimmer for Components`}</h2>\n    <p>{`When loading data, previously we would return `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` (or a full-screen loader) instead of the actual component. We can now return a\n`}<em parentName=\"p\"><strong parentName=\"em\">{`shimmer`}</strong></em>{` version of the component, which will take up the same space without relying on data.`}</p>\n    <p>{`Direct use of the `}<inlineCode parentName=\"p\">{`Shimmer`}</inlineCode>{` component within `}<em parentName=\"p\">{`normal`}</em>{` components should be avoided when possible. If the shimmer is replacing a component\nthat is imported, a `}<inlineCode parentName=\"p\">{`.shimmer.js`}</inlineCode>{` file should be created for that imported component in its folder and exported in its `}<inlineCode parentName=\"p\">{`index.js`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <p>{`There are 4 critical files for creating a Shimmer component:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Main.js`}</strong>{` - the main component that has the loading status and would usually return null for the component while loading`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SubComponent/index.js`}</strong>{` - Previously would only export the main component. Must now export named variable for shimmer component`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SubComponent/subComponent`}</strong>{` - Same SubComponent as usual`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SubComponent/subComponent.shimmer.js`}</strong>{` - `}<inlineCode parentName=\"li\">{`.shimmer.js`}</inlineCode>{` extension is used for easily identifying that it's a shimmer and\nthe component it's attached to. It can contain complex arrangement of base Shimmer elements, or include other subcomponents Shimmers.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Main.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport SubComponent, { SubComponentShimmer } from '../path/to/SubComponent';\n// ....\nexport default () => {\n    const { data, isLoading } = fetchData();\n\n    if (isLoading) {\n        return (\n          <SubComponentShimmer />\n        );\n    }\n\n    if (!data) {\n        return 'No data';\n    }\n\n    return (\n        <SubComponent someValue={data} />\n    );\n};\n// ....\n`}</code></pre>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`../path/to/SubComponent/index.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export { default } from './subComponent.js';\n// Export named shimmer component\nexport { default as SubComponentShimmer } from './subComponent.shimmer.js';\n`}</code></pre>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`../path/to/SubComponent/subComponent.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport { shape, string } from 'prop-types';\nimport { useStyle } from '../../path/to/classify';\nimport defaultClasses from './subComponent.css';\nconst SubComponent = (props) => {\n    const classes = useStyle(defaultClasses, props.classes);\n    const { someValue } = props;\n\n    return (\n        <div className={classes.root}>\n          <div className={classes.item}>{someValue}</div>\n        </div>\n    );\n};\nSubComponent.defaultProps = {\n    classes: {}\n};\nSubComponent.propTypes = {\n    classes: shape({\n      root: string,\n      item: string\n    })\n}\nexport default SubComponent;\n`}</code></pre>\n    <hr></hr>\n    <p><strong parentName=\"p\">{`../path/to/SubComponent/subComponent.shimmer.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React from 'react';\nimport { useStyle } from '../../path/to/classify';\nimport Shimmer from '../path/to/base/Shimmer';\nimport defaultClasses from './subComponent.css'; // Load same classes as real SubComponent\nconst SubComponentShimmer = (props) => {\n    // Important to still merge-in prop classes for extensibility/targetability\n    const classes = useStyle(defaultClasses, props.classes);\n\n    return (\n      <div className={classes.root}>\n        <Shimmer className={classes.item} />\n      </div>\n    );\n};\nSubComponentShimmer.defaultProps = {\n  classes: {}\n};\nSubComponentShimmer.propTypes = {\n  classes: shape({\n    root: string,\n    item: string\n  })\n}\nexport default SubComponentShimmer;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adjusting-existing-shimmers\"\n    }}>{`Adjusting existing Shimmers`}</h2>\n    <p>{`When you make layout changes to a Shimmer's parent component, you should also adjust the Shimmer component to match.\nIn this example, we'll add a custom attribute shimmer to the detail section of the product page.`}</p>\n    <p><strong parentName=\"p\">{`local-intercept.js`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const { Targetables } = require('@magento/pwa-buildpack');\nconst targetables = Targetables.using(targets);\nconst productShimmerComponent = targetables.reactComponent(\n    '@magento/venia-ui/lib/RootComponents/Product/product.shimmer'\n);\n\n/**\n * As a best practice, you should create a separate Shimmer file for the new attribute and import it into the\n * productShimmerComponent. But for simplicity, we'll inline the jsx as shown here.\n */\nproductShimmerComponent.appendJSX(\n    'section className={classes.details}'\n    \\`<div className={classes.detailsTitle}>\n        <Shimmer width=\"100%\" height={1} />\n     </div>\n     <Shimmer width=\"100%\" height={1} />\\`\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <p>{`To maintain accessibility for screen readers, we can pass `}<inlineCode parentName=\"p\">{`aria-live=\"polite\" aria-busy=\"true\"`}</inlineCode>{` to the Shimmer component (or an\nelement that wraps the Shimmer(s) in a more complex instance).`}</p>\n    <p>{`It's important to then add `}<inlineCode parentName=\"p\">{`aria-live=\"polite\" aria-busy=\"false\"`}</inlineCode>{` to the `}<em parentName=\"p\">{`normal`}</em>{` component that replaces the shimmer.`}</p>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// ....\nimport Shimmer from '../path/to/base/Shimmer';\n// ....\nexport default () => {\n  // ....\n  return (\n    <Shimmer />\n  );\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}