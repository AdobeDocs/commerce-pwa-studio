"use strict";(self.webpackChunkcommerce_pwa_studio=self.webpackChunkcommerce_pwa_studio||[]).push([[7993],{25671:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return p},default:function(){return l}});var a=t(87462),o=t(63366),s=(t(15007),t(64983)),r=t(91515),i=["components"],p={},c={_frontmatter:p},d=r.Z;function l(e){var n=e.components,t=(0,o.Z)(e,i);return(0,s.mdx)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"creating-custom-events"},"Creating custom events"),(0,s.mdx)("p",null,"The eventing framework introduced in the PWA Studio 12.5 release comes with a core set of storefront events related to various interactions with the application.\nYou can use PWA Studio's extensibility framework to modify your storefront and have it publish events not covered by the default set."),(0,s.mdx)("p",null,"PWA Studio provides the source for the ",(0,s.mdx)("a",{parentName:"p",href:"https://github.com/magento/pwa-studio/tree/develop/packages/extensions/experience-platform-connector/"},"Experience Platform Connector extension")," to show how you can add a custom event."),(0,s.mdx)("p",null,"This extension dispatches a ",(0,s.mdx)("inlineCode",{parentName:"p"},"SEARCH_RESPONSE")," event, which is not part of the default set. This event fires when a search result is returned in the application's search bar."),(0,s.mdx)("p",null,"These files show the different pieces and logic you need to create your own custom events."),(0,s.mdx)("h2",{id:"searchresponsereceivedjs"},"searchResponseReceived.js"),(0,s.mdx)("p",null,"This file is an event handler that returns two functions:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"canHandle()")," - a function that receives an event from PWA Studio's eventing framework and returns ",(0,s.mdx)("inlineCode",{parentName:"li"},"true")," if the ",(0,s.mdx)("inlineCode",{parentName:"li"},"handle()")," function should handle the incoming event."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("inlineCode",{parentName:"li"},"handle()")," - the function that handles the event.")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"const canHandle = event => event.type === 'SEARCH_RESPONSE';\n\nconst handle = (sdk, event) => {\n    const { payload } = event;\n\n    const {\n        categories,\n        facets,\n        page,\n        perPage,\n        products,\n        searchRequestId,\n        searchUnitId,\n        suggestions\n    } = payload;\n\n    const searchResultsContext = {\n        units: [\n            {\n                categories,\n                facets,\n                page,\n                perPage,\n                products,\n                searchRequestId,\n                searchUnitId,\n                suggestions\n            }\n        ]\n    };\n\n    sdk.context.setSearchResults(searchResultsContext);\n    sdk.publish.searchResponseReceived(searchUnitId, searchResultsContext);\n};\n\nexport default {\n    canHandle,\n    handle\n};\n")),(0,s.mdx)("h2",{id:"wrapuseautocompletejs"},"wrapUseAutocomplete.js"),(0,s.mdx)("p",null,"This file is a ",(0,s.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/commerce/pwa-studio/tutorials/targets/modify-talon-results/"},"talon wrapper")," that wraps around the ",(0,s.mdx)("inlineCode",{parentName:"p"},"useAutocomplete()")," talon to add additional event dispatching logic.\nIn ",(0,s.mdx)("inlineCode",{parentName:"p"},"wrapUseAutocomplete.js")," the search result is received and the payload defined and dispatched. This take place in the ",(0,s.mdx)("inlineCode",{parentName:"p"},"useEffect")," function:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"import { useEffect } from 'react';\nimport { useEventingContext } from '@magento/peregrine/lib/context/eventing';\n\n// Wrapper for the useAutocomplete() talon\nconst wrapUseAutocomplete = useAutocomplete => {\n    return props => {\n        const talonProps = useAutocomplete(props);\n        const [, { dispatch }] = useEventingContext();\n\n        const {\n            categories,\n            displayResult,\n            messageType,\n            value,\n            ...restProps\n        } = talonProps;\n\n        useEffect(() => {\n            if (\n                messageType === 'RESULT_SUMMARY' ||\n                messageType === 'EMPTY_RESULT'\n            ) {\n                dispatch({\n                    type: 'SEARCH_RESPONSE',\n                    payload: {\n                        categories: categories || [],\n                        facets: [],\n                        page: 1,\n                        perPage: 3, // Same value used in GQL query\n                        products: displayResult || [],\n                        searchRequestId: value,\n                        searchUnitId: 'search-bar',\n                        suggestions: displayResult || []\n                    }\n                });\n            }\n        });\n\n        return {\n            displayResult,\n            messageType,\n            value,\n            ...restProps\n        };\n    };\n};\n\nexport default wrapUseAutocomplete;\n")),(0,s.mdx)("p",null,"Read more about ",(0,s.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/commerce/pwa-studio/guides/general-concepts/extensibility/"},"PWA Studio extensibility"),"."),(0,s.mdx)("h2",{id:"interceptjs"},"intercept.js"),(0,s.mdx)("p",null,"The intercept file interacts with PWA Studio's extensibility framework to modify code during build time.\nIn this particular code, the ",(0,s.mdx)("inlineCode",{parentName:"p"},"useApp()"),", ",(0,s.mdx)("inlineCode",{parentName:"p"},"useAccountMenu()"),", and ",(0,s.mdx)("inlineCode",{parentName:"p"},"useAutocomplete()")," talons are wrapped with modules that provide additional logic."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"    talons.tap(({ App, Header, SearchBar }) => {\n        App.useApp.wrapWith('@magento/experience-platform-connector');\n        Header.useAccountMenu.wrapWith(\n            '@magento/experience-platform-connector/src/wrappers/wrapUseAccountMenu'\n        );\n        SearchBar.useAutocomplete.wrapWith(\n            '@magento/experience-platform-connector/src/wrappers/wrapUseAutocomplete'\n        );\n")),(0,s.mdx)("p",null,"When your code is complete, you can ",(0,s.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/commerce/pwa-studio/tutorials/targets/modify-talon-results/#test-on-a-local-instance"},"test on a local instance"),"."))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-tutorials-events-custom-events-index-md-66abc0bb6848e981070d.js.map