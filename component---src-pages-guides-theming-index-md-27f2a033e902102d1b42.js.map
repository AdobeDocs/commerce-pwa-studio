{"version":3,"file":"component---src-pages-guides-theming-index-md-27f2a033e902102d1b42.js","mappings":"mNAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIU,YAJF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,wCAAsC,yCAE9C,mBAAG,cAAGC,WAAW,IACb,KAAQ,4BAA0B,gBACb,gQACzB,eACE,GAAM,6BAA2B,8BAEnC,6bACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,oBAAkB,iIAMnC,+KAAgK,cAAGA,WAAW,IAC1K,KAAQ,sCAAoC,gCACP,MACzC,eACE,GAAM,8BAA4B,+BAEpC,gCAAiB,mBAAQA,WAAW,KAAG,eAAyB,kFAChE,mBAAG,mBAAQA,WAAW,KAAG,oCAA8C,gCAAgC,cAAGA,WAAW,IACjH,KAAQ,sEAAoE,4BAC3C,yMACrC,mBAAG,mBAAQA,WAAW,KAAG,4CAAsD,+JAA+J,cAAGA,WAAW,IACxP,KAAQ,2BAAyB,0BACF,SAAS,cAAGA,WAAW,IACtD,KAAQ,uBAAqB,sBACF,mBAC/B,eACE,GAAM,0BAAwB,2BAEhC,2DAA4C,uBAAYA,WAAW,KAAG,YAA0B,QAAQ,uBAAYA,WAAW,KAAG,eAA6B,iBAC/J,SAACV,EAAS,CAACW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,YAAYJ,QAAQ,eAC1E,eACE,GAAM,QAAM,SAEd,qBAAK,iBAAMC,WAAW,MAClB,UAAa,iBAAe,iIAGhC,eACE,GAAM,OAAK,QAEb,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,oIAGhC,oBACE,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAI,4BAAsC,6BAA6B,cAAGA,WAAW,KACxH,KAAQ,kGAAgG,qBAC9E,MAC9B,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAI,eAAyB,2DAA2D,cAAGA,WAAW,KACzI,KAAQ,sDAAoD,eACxC,MACxB,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAI,WAAqB,yEAAyE,cAAGA,WAAW,KACnJ,KAAQ,kDAAgD,eACpC,MACxB,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAI,kBAA4B,qEAAqE,cAAGA,WAAW,KACtJ,KAAQ,wDAAsD,eAC1C,MACxB,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAI,gBAA0B,+DAA+D,cAAGA,WAAW,KAC9I,KAAQ,8CAA4C,eAChC,OAE1B,+CAAgC,uBAAYA,WAAW,KAAG,gBAA8B,0EACxF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,4LAShC,eACE,GAAM,sBAAoB,uBAE5B,0JACA,oBACE,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAI,iBAA2B,cAAc,uBAAYA,WAAW,MAAI,OAAqB,2CAA2C,uBAAYA,WAAW,MAAI,aAA2B,wCACrO,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAI,sBAAgC,kEAAkE,uBAAYA,WAAW,MAAI,sBAAoC,8DAC5M,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAI,qBAA+B,kEAAkE,uBAAYA,WAAW,MAAI,qBAAmC,uBAAuB,uBAAYA,WAAW,MAAI,eAA6B,mCAE3R,2FACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,iGAOhC,eACE,GAAM,YAAU,cAElB,0BAAW,uBAAYA,WAAW,KAAG,aAA2B,mBAAmB,uBAAYA,WAAW,KAAG,aAA2B,+EAA+E,cAAGA,WAAW,IACjO,KAAQ,yEAAuE,UAChE,sCACU,uBAAYA,WAAW,KAAG,aAA2B,WAClF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,oFAOhC,uEAAwD,cAAGA,WAAW,IAClE,KAAQ,yEAAuE,eAC3D,cAAc,uBAAYA,WAAW,KAAG,eAA6B,0BAA0B,uBAAYA,WAAW,KAAG,gBAA8B,qBAC/K,oBACE,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAI,6BAAuC,6CAClF,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAI,mCAA6C,4CACxF,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAI,kCAA4C,4CAEzF,0BAAW,uBAAYA,WAAW,KAAG,YAA0B,mGAAmG,uBAAYA,WAAW,KAAG,kBAAgC,gDAAgD,uBAAYA,WAAW,KAAG,WAAyB,QAAQ,uBAAYA,WAAW,KAAG,SAAuB,6CAA6C,uBAAYA,WAAW,KAAG,cAA4B,2BAA2B,uBAAYA,WAAW,KAAG,UAAwB,mHAAmH,uBAAYA,WAAW,KAAG,iBAA+B,oFACptB,eACE,GAAM,WAAS,aAEjB,iCAAkB,uBAAYA,WAAW,KAAG,aAA2B,uBAAuB,uBAAYA,WAAW,KAAG,UAAwB,iBAAiB,uBAAYA,WAAW,KAAG,gBAA8B,yGAAyG,uBAAYA,WAAW,KAAG,aAA2B,0CAC3V,uBAAYA,WAAW,KAAG,gBAA8B,WACpF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,gDAK9B,oCAAqB,uBAAYA,WAAW,KAAG,aAA2B,iMAAiM,uBAAYA,WAAW,KAAG,sBAAoC,qBACzU,eACE,GAAM,oBAAkB,uBAE1B,0BAAW,uBAAYA,WAAW,KAAG,sBAAoC,4PACzE,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,4BAGhC,oCAAqB,uBAAYA,WAAW,KAAG,QAAsB,yCAAyC,uBAAYA,WAAW,KAAG,sBAAoC,uCAC5K,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,oIAW9B,6JAA8I,uBAAYA,WAAW,KAAG,sBAAoC,WAC5M,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,wiDAkD9B,mFACA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAG,QAAkB,WAAW,uBAAYA,WAAW,KAAG,QAAsB,wBAAwB,uBAAYA,WAAW,KAAG,OAAqB,gFAAgF,uBAAYA,WAAW,KAAG,QAAsB,iBAAiB,uBAAYA,WAAW,KAAG,SAAuB,cAAc,cAAGA,WAAW,IACvZ,KAAQ,qDAAmD,YAC1C,uCAEvB,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAG,WAAqB,kFAAkF,uBAAYA,WAAW,KAAG,SAAuB,gEAAgE,uBAAYA,WAAW,KAAG,SAAuB,wFAAwF,cAAGA,WAAW,IACpZ,KAAQ,2CAAyC,WACjC,uCAEtB,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAG,SAAmB,sBAAsB,cAAGA,WAAW,IAC5F,KAAQ,yBAAuB,YACd,wCAAwC,uBAAYA,WAAW,KAAG,aAA2B,4FAA4F,cAAGA,WAAW,IACxN,KAAQ,oFAAkF,0BAC3D,SAAS,cAAGA,WAAW,IACtD,KAAQ,iFAA+E,uBAC3D,uCAElC,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAG,WAAqB,4CAA4C,cAAGA,WAAW,IACpH,KAAQ,2CAAyC,WACjC,uCAEtB,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAG,aAAuB,iHAAiH,uBAAYA,WAAW,KAAG,KAAmB,qDAAqD,uBAAYA,WAAW,KAAG,KAAmB,wEAAwE,cAAGA,WAAW,IAClZ,KAAQ,2DAAyD,aAC/C,sCACtB,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAG,YAAsB,uHAAuH,uBAAYA,WAAW,KAAG,KAAmB,YAAY,cAAGA,WAAW,IACzP,KAAQ,2DAAyD,aAC/C,mCAAmC,uBAAYA,WAAW,KAAG,KAAmB,QAExG,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAG,SAAmB,0FAA0F,cAAGA,WAAW,IAChK,KAAQ,yCAAuC,uBACnB,uCAElC,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,mBAAQA,WAAW,KAAG,WAAqB,mDAAmD,uBAAYA,WAAW,KAAG,YAA0B,sEAAsE,uBAAYA,WAAW,KAAG,aAA2B,eAAe,cAAGA,WAAW,IACzT,KAAQ,oFAAkF,0BAC3D,wCAGvC,eACE,GAAM,mBAAiB,sBAEzB,iCAAkB,uBAAYA,WAAW,KAAG,qBAAmC,yDAAyD,uBAAYA,WAAW,KAAG,eAA6B,aAAa,uBAAYA,WAAW,KAAG,gBAA8B,2CAA2C,uBAAYA,WAAW,KAAG,qBAAmC,iCAC5W,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,6JAU9B,eACE,GAAM,4BAA0B,6BAElC,sFAAuE,uBAAYA,WAAW,KAAG,SAAuB,0BAA0B,uBAAYA,WAAW,KAAG,sBAAoC,gJAChN,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,uHAW9B,uDAAwC,cAAGA,WAAW,IAClD,KAAQ,4EAA0E,0BACnD,sCACnC,eACE,GAAM,yBAAuB,0BAE/B,+BAAgB,mBAAQA,WAAW,KAAG,eAAyB,yDAC/D,mBAAG,mBAAQA,WAAW,KAAG,qBAAsB,uBAAYA,WAAW,UAAQ,sBAAoC,gBAClH,mBAAG,mBAAQA,WAAW,KAAG,iDACzB,eACE,GAAM,oCAAkC,uCAE1C,qJAAsI,uBAAYA,WAAW,KAAG,SAAuB,qBAAqB,uBAAYA,WAAW,KAAG,uBAAqC,yBAC3Q,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,oPAiB9B,4YACA,eACE,GAAM,sBAAoB,uBAE5B,mHAAoG,cAAGA,WAAW,IAC9G,KAAQ,wCAAsC,gBACzB,0BAA0B,uBAAYA,WAAW,KAAG,sBAAoC,0BACjH,oBACE,eAAIA,WAAW,MAAI,iBAAkB,uBAAYA,WAAW,MAAI,sBAAoC,kEACpG,eAAIA,WAAW,MAAI,iBAAkB,uBAAYA,WAAW,MAAI,SAAuB,kFAEzF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,yKAa9B,oBACE,eAAIA,WAAW,MAAI,oCAAqC,uBAAYA,WAAW,MAAI,sBAAoC,uBAAuB,uBAAYA,WAAW,MAAI,WAAyB,aAEpM,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,sMAU9B,gDAAiC,uBAAYA,WAAW,KAAG,iBAA+B,eAAe,uBAAYA,WAAW,KAAG,SAAuB,0BAA0B,uBAAYA,WAAW,KAAG,iBAA+B,6GAA6G,cAAGA,WAAW,IACpW,KAAQ,+DAA6D,iCAC/B,sCAC1C,oBACE,eAAIA,WAAW,MAAI,uBAErB,eACE,GAAM,kCAAgC,mCAExC,yHAA0G,cAAGA,WAAW,IACpH,KAAQ,2EAAyE,yCACnC,MAClD,sCAAuB,mBAAQA,WAAW,KAAG,YAAsB,wBAAwB,uBAAYA,WAAW,KAAG,UAAwB,SAAS,uBAAYA,WAAW,KAAG,cAA4B,WAAW,mBAAQA,WAAW,KAAG,aAAuB,cAAc,uBAAYA,WAAW,KAAG,YAA0B,SAAS,uBAAYA,WAAW,KAAG,UAAwB,mEACjY,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,mpBAmC9B,eACE,GAAM,+BAA6B,gCAErC,8EAA+D,uBAAYA,WAAW,KAAG,4BAA0C,UAAU,cAAGA,WAAW,IACvJ,KAAQ,2GAAyG,mCACzE,wCAC5C,sCAAuB,mBAAQA,WAAW,KAAG,YAAsB,qBAAqB,uBAAYA,WAAW,KAAG,cAA4B,iBAAiB,mBAAQA,WAAW,KAAG,UAAoB,iBAAiB,uBAAYA,WAAW,KAAG,mBAAiC,SAAS,uBAAYA,WAAW,KAAG,gBAA8B,kCAAkC,uBAAYA,WAAW,KAAG,SAAuB,gCACza,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,gcAsB9B,4IAA6H,uBAAYA,WAAW,KAAG,2CAAyD,qBAChN,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,kKAa9B,eACE,GAAM,mBAAiB,oBAEzB,kJACA,eACE,GAAM,2BAAyB,4BAEjC,uQACA,mDAAoC,cAAGA,WAAW,IAC9C,KAAQ,uCAAqC,oBACpB,+BAA+B,uBAAYA,WAAW,KAAG,uBAAqC,MAC3H,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,2JAa9B,wDAAyC,uBAAYA,WAAW,KAAG,uBAAqC,yCACxG,eACE,GAAM,gCAA8B,iCAEtC,2FAA4E,uBAAYA,WAAW,KAAG,wBAAsC,MAC5I,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eAAa,uKAgBlC,CAEAH,EAAWO,gBAAiB,C","sources":["webpack://commerce-pwa-studio/./src/pages/guides/theming/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tailwind-theming-for-pwa-studio-apps\"\n    }}>{`Tailwind Theming for PWA Studio apps`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://tailwindcss.com/\"\n      }}>{`Tailwind CSS`}</a>{` is a popular CSS framework for rapidly building custom user interfaces, focused on flexibility and designed for quick, custom branding. This topic describes how you can install, configure, and use Tailwind with Venia to theme your own PWA Studio app.`}</p>\n    <h2 {...{\n      \"id\": \"tailwind-and-venia-themes\"\n    }}>{`Tailwind and Venia themes`}</h2>\n    <p>{`Both the Tailwind and Venia themes are considered base themes — themes designed with only minimal brand-styling. We use base themes so you can quickly customize your apps with different colors, typography, images, and other brand attributes. The included Venia base theme provides a layer on top of Tailwind's base theme. The Venia theme uses all the best practices required for overriding and extending other base themes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mermaid\"\n      }}>{`graph LR\ninstall[Install Plugin]\ninstall --> configure[Configure Plugin]\nconfigure --> draw[Draw Fancy Diagrams]\n`}</code></pre>\n    <p>{`We designed the Venia theme to be both a starting point and an example for creating your own custom themes. To learn more about Tailwind themes, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://tailwindcss.com/docs/theme\"\n      }}>{`Tailwind theme documentation`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"install-tailwind-and-venia\"\n    }}>{`Install Tailwind and Venia`}</h2>\n    <p>{`There are `}<strong parentName=\"p\">{`two options`}</strong>{` for installing the Tailwind and Venia base themes into your PWA Studio apps:`}</p>\n    <p><strong parentName=\"p\">{`OPTION 1: Use the create-pwa CLI`}</strong>{` — For new PWA Studio apps, `}<a parentName=\"p\" {...{\n        \"href\": \"../../tutorials/setup-storefront/index.md#run-the-scaffolding-tool\"\n      }}>{`using the create-pwa CLI`}</a>{` is the fastest way to install and configure Tailwind theming. The CLI adds all the theme packages and files you need to start customizing the new app with your own theme extensions and overrides.`}</p>\n    <p><strong parentName=\"p\">{`OPTION 2: Install and configure manually`}</strong>{` — For upgrading existing PWA Studio apps, you need to manually install and configure the Tailwind and Venia theme packages and files. The instructions in `}<a parentName=\"p\" {...{\n        \"href\": \"#install-theme-packages\"\n      }}>{`Install theme packages`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#create-theme-files\"\n      }}>{`Create theme files`}</a>{` show you how.`}</p>\n    <h2 {...{\n      \"id\": \"install-theme-packages\"\n    }}>{`Install theme packages`}</h2>\n    <p>{`Install the following packages using `}<inlineCode parentName=\"p\">{`yarn add`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`npm install`}</inlineCode>{` as follows:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"bash,bash\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"yarn\"\n    }}>{`yarn`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add -D @magento/pwa-theme-venia@^1.3.0 tailwindcss@~2.2.19 postcss@~8.3.11 postcss-loader@~4.3.0 autoprefixer@latest\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"npm\"\n    }}>{`npm`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install -D @magento/pwa-theme-venia@^1.3.0 tailwindcss@~2.2.19 postcss@~8.3.11 postcss-loader@~4.3.0 autoprefixer@latest\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`@magento/pwa-theme-venia`}</strong>{` — The Venia base theme (`}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/pwa-studio/blob/develop/packages/pwa-theme-venia/tailwind.preset.js\"\n        }}>{`theme source file`}</a>{`)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`tailwindcss`}</strong>{` — v2.2.x patch release of the Tailwind CSS framework (`}<a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/tailwindcss/v/2.2.19\"\n        }}>{`npm package`}</a>{`)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`postcss`}</strong>{` — v8.3.x patch release for installing Tailwind as a PostCSS plugin (`}<a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/postcss/v/8.3.11\"\n        }}>{`npm package`}</a>{`)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`postcss-loader`}</strong>{` — v4.3.x patch release for loading PostCSS as a Webpack loader (`}<a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/postcss-loader/v/4.3.0\"\n        }}>{`npm package`}</a>{`)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`autoprefixer`}</strong>{` — Latest release for adding vendor prefixes to CSS rules (`}<a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/autoprefixer\"\n        }}>{`npm package`}</a>{`)`}</li>\n    </ul>\n    <p>{`After installation, your `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file should contain the following entries (patch versions may vary):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"devDependencies\": {\n  \"@magento/pwa-theme-venia\": \"^1.3.0\",\n  \"autoprefixer\": \"~10.3.7\",\n  \"postcss\": \"~8.3.11\",\n  \"postcss-loader\": \"~4.3.0\",\n  \"tailwindcss\": \"~2.2.19\"\n  }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-theme-files\"\n    }}>{`Create theme files`}</h2>\n    <p>{`Create the following empty files in your project. After that, we'll explain each file's purpose and add the required starting code.`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`src/index.css`}</strong>{` — In the `}<inlineCode parentName=\"li\">{`src`}</inlineCode>{` directory, create a blank file called `}<inlineCode parentName=\"li\">{`index.css`}</inlineCode>{` for Tailwind's global base styles.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`tailwind.config.js`}</strong>{` — In your project root directory, create a blank file called `}<inlineCode parentName=\"li\">{`tailwind.config.js`}</inlineCode>{` for Tailwind's configuration, overrides, and extensions.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`postcss.config.js`}</strong>{` — In your project root directory, create a blank file called `}<inlineCode parentName=\"li\">{`postcss.config.js`}</inlineCode>{` for including the `}<inlineCode parentName=\"li\">{`tailwindcss`}</inlineCode>{` package as a postCSS plugin.`}</li>\n    </ul>\n    <p>{`When you're done, your project directory should include these files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`project-root/\n├── postcss.config.js\n├── src/\n│   ├── index.css\n├── tailwind.config.js\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"indexcss\"\n    }}>{`index.css`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`index.css`}</inlineCode>{` file uses the `}<inlineCode parentName=\"p\">{`@tailwind`}</inlineCode>{` directive to include all of Tailwind's base, component, and utility style `}<a parentName=\"p\" {...{\n        \"href\": \"https://tailwindcss.com/docs/adding-custom-styles#using-css-and-layer\"\n      }}>{`layers`}</a>{`.\nAdd the following lines to the `}<inlineCode parentName=\"p\">{`index.css`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sass\"\n      }}>{`// index.css\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n`}</code></pre>\n    <p>{`These directives load the corresponding Tailwind `}<a parentName=\"p\" {...{\n        \"href\": \"https://tailwindcss.com/docs/adding-custom-styles#using-css-and-layer\"\n      }}>{`layer files`}</a>{` from the `}<inlineCode parentName=\"p\">{`tailwindcss`}</inlineCode>{` package installed in `}<inlineCode parentName=\"p\">{`node_modules`}</inlineCode>{`, as shown here:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`tailwindcss/dist/base.css`}</strong>{` (normalizing styles, 500+ lines of CSS)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`tailwindcss/dist/components.css`}</strong>{` (component classes, 200+ lines of CSS)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`tailwindcss/dist/utilities.css`}</strong>{` (utility classes, 175K+ lines of CSS)`}</li>\n    </ul>\n    <p>{`The `}<inlineCode parentName=\"p\">{`base.css`}</inlineCode>{` layer contains the most basic styles for resetting or normalizing styles across browsers. The `}<inlineCode parentName=\"p\">{`components.css`}</inlineCode>{` layer is for component-level classes, like `}<inlineCode parentName=\"p\">{`.button`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`.form`}</inlineCode>{`. By default, Tailwind provides a single `}<inlineCode parentName=\"p\">{`.container`}</inlineCode>{` class within multiple `}<inlineCode parentName=\"p\">{`@media`}</inlineCode>{` queries. This file provides a good starter template for adding your own component-level classes. Finally, the `}<inlineCode parentName=\"p\">{`utilities.css`}</inlineCode>{` layer contains all the Tailwind utility classes used directly within elements.`}</p>\n    <h3 {...{\n      \"id\": \"indexjs\"\n    }}>{`index.js`}</h3>\n    <p>{`To use the `}<inlineCode parentName=\"p\">{`index.css`}</inlineCode>{` file, you need to `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{` it into the `}<inlineCode parentName=\"p\">{`src/index.js`}</inlineCode>{` file. This file is the entry point for the Webpack build process, so it's the best place to add the `}<inlineCode parentName=\"p\">{`index.css`}</inlineCode>{` file.\nAdd the following line to the `}<inlineCode parentName=\"p\">{`src/index.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// src/index.js\n\nimport \"./index.css\";\n`}</code></pre>\n    <p>{`Importing the `}<inlineCode parentName=\"p\">{`index.css`}</inlineCode>{` ensures that your app uses the base set of Tailwind styles and utility classes. After that, you can add your own custom themes and styles to extend or override those base styles using the `}<inlineCode parentName=\"p\">{`tailwind.config.js`}</inlineCode>{` described next.`}</p>\n    <h3 {...{\n      \"id\": \"tailwindconfigjs\"\n    }}>{`tailwind.config.js`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`tailwind.config.js`}</inlineCode>{` file is where you configure Tailwind and, most importantly, override and extend its base styles. Instead of adding this file manually to the root of your project, you can run the following command to generate a minimal default configuration file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npx tailwindcss init\n`}</code></pre>\n    <p>{`After running `}<inlineCode parentName=\"p\">{`init`}</inlineCode>{`, your project root should contain a `}<inlineCode parentName=\"p\">{`tailwind.config.js`}</inlineCode>{` file with the following contents:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// tailwind.config.js (default)\n\nmodule.exports = {\n  content: [],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n`}</code></pre>\n    <p>{`However, to configure your PWA Studio app for theming, you need to add a lot more. Start by copying the following code block into your `}<inlineCode parentName=\"p\">{`tailwind.config.js`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// tailwind.config.js (PWA Studio)\n\nconst venia = require(\"@magento/pwa-theme-venia\");\n\nconst config = {\n  mode: \"jit\",\n  // Include your custom theme here.\n  presets: [venia],\n  // Configure how Tailwind statically analyzes your code here.\n  // Note that the Tailwind's \\`jit\\` mode doesn't actually use PurgeCSS.\n  purge: {\n    // Include paths to every file that may refer to Tailwind classnames.\n    // Classnames not found in these files will be excluded at build time.\n    content: [\n      \"./node_modules/@magento/venia-ui/lib/**/*.module.css\",\n      \"../venia-ui/lib/**/*.module.css\",\n      \"./src/**/*.module.css\",\n      \"./template.html\",\n    ],\n    // This extracts Tailwind classnames from source files.\n    // NOTE: Our default matcher only matches targets of the CSS Modules'\n    // \\`composes\\` function, not classnames included directly in HTML or JS!\n    extractors: [\n      {\n        extensions: [\"css\"],\n        extractor: (content) => content.match(matcher) || [],\n      },\n    ],\n  },\n  // Set the character Tailwind uses when prefixing classnames with variants.\n  // CSS Modules doesn't support Tailwind's default separator \\`:\\`, so we use \\`_\\`.\n  separator: \"_\",\n  theme: {\n    extend: {},\n  },\n};\nmodule.exports = config;\n\n/**\n * Matches declarations that contain Tailwind classnames.\n * Only CSS Module classnames that use \\`composes\\` are included in the build.\n *\n * @example\n * .foo {\n *   composes: mx-auto from global;\n * }\n */\nconst matcher = /(?<=composes:.*)(\\\\b\\\\S+\\\\b)(?=.*from global;)/g;\n`}</code></pre>\n    <p>{`Descriptions of each configuration option are provided here:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`mode`}</strong>{` - The `}<inlineCode parentName=\"p\">{`mode`}</inlineCode>{` property is set to `}<inlineCode parentName=\"p\">{`jit`}</inlineCode>{` by default to provide faster build times. To disable the JIT mode, set the `}<inlineCode parentName=\"p\">{`mode`}</inlineCode>{` property to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`. See the `}<a parentName=\"p\" {...{\n            \"href\": \"https://v2.tailwindcss.com/docs/just-in-time-mode\"\n          }}>{`JIT mode`}</a>{` from the Tailwind documentation.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`presets`}</strong>{` - Adds additional theme configurations on top of Tailwind's base styles. The `}<inlineCode parentName=\"p\">{`venia`}</inlineCode>{` theme is added by default. You have the option to keep the `}<inlineCode parentName=\"p\">{`venia`}</inlineCode>{` theme and override or extend it with your own theme, or replace it completely. See `}<a parentName=\"p\" {...{\n            \"href\": \"https://v2.tailwindcss.com/docs/presets\"\n          }}>{`Presets`}</a>{` from the Tailwind documentation.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`purge`}</strong>{` - Configures the `}<a parentName=\"p\" {...{\n            \"href\": \"https://purgecss.com/\"\n          }}>{`PurgeCSS`}</a>{` tool to remove unused CSS from the `}<inlineCode parentName=\"p\">{`index.css`}</inlineCode>{` file. This optimizes the production builds by reducing the size of the CSS bundle. See `}<a parentName=\"p\" {...{\n            \"href\": \"https://v2.tailwindcss.com/docs/optimizing-for-production#writing-purgeable-html\"\n          }}>{`Writing purgeable HTML`}</a>{` and `}<a parentName=\"p\" {...{\n            \"href\": \"https://v2.tailwindcss.com/docs/optimizing-for-production#removing-unused-css\"\n          }}>{`Removing unused CSS`}</a>{` from the Tailwind documentation.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`plugins`}</strong>{` - Configures Tailwind CSS plugins. See `}<a parentName=\"p\" {...{\n            \"href\": \"https://v2.tailwindcss.com/docs/plugins\"\n          }}>{`Plugins`}</a>{` from the Tailwind documentation.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`separator`}</strong>{` - Defines the character that separates the variant prefixes from the utility names. Tailwind uses the colon `}<inlineCode parentName=\"p\">{`:`}</inlineCode>{` by default, but PWA Studio uses the underscore (`}<inlineCode parentName=\"p\">{`_`}</inlineCode>{`) because CSS Modules doesn't support the colon in class names. See `}<a parentName=\"p\" {...{\n            \"href\": \"https://v2.tailwindcss.com/docs/configuration#separator\"\n          }}>{`Separator`}</a>{` from the Tailwind documentation.`}</p>\n        <p parentName=\"li\"><strong parentName=\"p\">{`REMEMBER`}</strong>{`: When looking at code samples in the Tailwind docs, keep in mind that the base project configures Tailwind to use `}<inlineCode parentName=\"p\">{`_`}</inlineCode>{` as the `}<a parentName=\"p\" {...{\n            \"href\": \"https://v2.tailwindcss.com/docs/configuration#separator\"\n          }}>{`separator`}</a>{` instead of the default colon (`}<inlineCode parentName=\"p\">{`:`}</inlineCode>{`).`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`theme`}</strong>{` - Defines your custom values that override or extend the Tailwind CSS framework. See `}<a parentName=\"p\" {...{\n            \"href\": \"https://v2.tailwindcss.com/docs/theme\"\n          }}>{`Theme Configuration`}</a>{` from the Tailwind documentation.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`matcher`}</strong>{` - Matches CSS Modules classnames that use the `}<inlineCode parentName=\"p\">{`composes`}</inlineCode>{` function. PurgeCSS uses this value to remove unused CSS from the `}<inlineCode parentName=\"p\">{`index.css`}</inlineCode>{` file. See `}<a parentName=\"p\" {...{\n            \"href\": \"https://v2.tailwindcss.com/docs/optimizing-for-production#writing-purgeable-html\"\n          }}>{`Writing purgeable HTML`}</a>{` from the Tailwind documentation.`}</p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"postcssconfigjs\"\n    }}>{`postcss.config.js`}</h3>\n    <p>{`Create the `}<inlineCode parentName=\"p\">{`postcss.config.js`}</inlineCode>{` file in your project's root and configure it to add `}<inlineCode parentName=\"p\">{`tailwindcss`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`autoprefixer`}</inlineCode>{` as PostCSS plugins for your app. Your `}<inlineCode parentName=\"p\">{`postcss.config.js`}</inlineCode>{` file should look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// postcss.config.js\n\nmodule.exports = {\n  plugins: [\n    require(\"autoprefixer\"),\n    require(\"tailwindcss\")(\"./tailwind.config.js\"),\n  ],\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-theme-configuration\"\n    }}>{`Test theme configuration`}</h2>\n    <p>{`For a quick test of your Venia configuration, add the following `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` override directly to `}<inlineCode parentName=\"p\">{`tailwind.config.js`}</inlineCode>{` (then remove it after you verify it works). If the text color in your Venia-themed app turns red, your configuration is working correctly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// tailwind.config.js\n\ntheme: {\n  extend: {\n    textColor: {\n      colorDefault: \"#BB0000\";\n    }\n  }\n}\n`}</code></pre>\n    <p>{`To test your own theme, refer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://tailwindcss.com/docs/adding-custom-styles#customizing-your-theme\"\n      }}>{`Customizing your theme`}</a>{` from the Tailwind documentation.`}</p>\n    <h2 {...{\n      \"id\": \"customize-base-styles\"\n    }}>{`Customize base styles`}</h2>\n    <p>{`You have `}<strong parentName=\"p\">{`two options`}</strong>{` for customizing the Tailwind and Venia base styles:`}</p>\n    <p><strong parentName=\"p\">{`OPTION 1: Update `}<inlineCode parentName=\"strong\">{`tailwind.config.js`}</inlineCode>{` directly.`}</strong></p>\n    <p><strong parentName=\"p\">{`OPTION 2: Create a new theme (recommended).`}</strong></p>\n    <h3 {...{\n      \"id\": \"update-tailwindconfigjs-directly\"\n    }}>{`Update tailwind.config.js directly`}</h3>\n    <p>{`As you did when testing your theme configuration, you can override or extend the Tailwind and Venia themes directly within the `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` property of the `}<inlineCode parentName=\"p\">{`tailwind.config.js.`}</inlineCode>{` file as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// tailwind.config.js\n\ntheme: {\n  extend: {\n    fontFamily: {\n      sans: ['\"Open Sans\"', \"sans-serif\"];\n    }\n    backgroundColor: {\n      subtitle: \"#F5F5F5\";\n    }\n    borderRadius: {\n      radius4: \"50%\";\n    }\n  }\n}\n`}</code></pre>\n    <p>{`However, you should avoid this option for all but the smallest real-world changes. For example, if you plan to use the Venia base theme with only a few custom colors and fonts, this option may be fine for your needs. However, if you are going to make several style changes or plan to rotate through different themes (seasonal or otherwise), create a new theme file instead.`}</p>\n    <h3 {...{\n      \"id\": \"create-a-new-theme\"\n    }}>{`Create a new theme`}</h3>\n    <p>{`We recommended this option for all but the smallest changes. The steps for creating your own `}<a parentName=\"p\" {...{\n        \"href\": \"https://tailwindcss.com/docs/presets\"\n      }}>{`theme preset`}</a>{` and adding it to the `}<inlineCode parentName=\"p\">{`tailwind.config.js`}</inlineCode>{` file are as follows:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a new `}<inlineCode parentName=\"li\">{`my-theme-preset.js`}</inlineCode>{` file anywhere in your project and name it whatever you want.`}</li>\n      <li parentName=\"ol\">{`Export a new `}<inlineCode parentName=\"li\">{`theme`}</inlineCode>{` object with your Tailwind and/or Venia base theme extensions and overrides:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// my-theme-preset.js\n\nmodule.exports = {\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: [\"Courier\", \"sans-serif\"],\n      },\n    },\n  },\n};\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`Import your theme preset to the `}<inlineCode parentName=\"li\">{`tailwind.config.js`}</inlineCode>{` and add it to the `}<inlineCode parentName=\"li\">{`presets`}</inlineCode>{` array:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// tailwind.config.js\n\nconst venia = require(\"@magento/pwa-theme-venia\");\nconst myThemePreset = require(\"./my-theme-preset\");\n\nmodule.exports = {\n  presets: [venia, myThemePreset],\n};\n`}</code></pre>\n    <p>{`The previous example adds `}<inlineCode parentName=\"p\">{`myThemePreset`}</inlineCode>{` after the `}<inlineCode parentName=\"p\">{`venia`}</inlineCode>{` preset, meaning that `}<inlineCode parentName=\"p\">{`myThemePreset`}</inlineCode>{` will be merged to override or extend the base styles from Venia and Tailwind. For more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://tailwindcss.com/docs/presets#merging-logic-in-depth\"\n      }}>{`how configurations are merged`}</a>{` from the Tailwind documentation.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Rebuild your app.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"customize-tailwind-base-styles\"\n    }}>{`Customize Tailwind base styles`}</h3>\n    <p>{`To override or extend the Tailwind base styles for a specific Tailwind version, use this site as a `}<a parentName=\"p\" {...{\n        \"href\": \"https://unpkg.com/browse/tailwindcss@2.2.19/stubs/defaultConfig.stub.js\"\n      }}>{`reference to the Tailwind base styles`}</a>{`.`}</p>\n    <p>{`For example, to `}<strong parentName=\"p\">{`override`}</strong>{` Tailwind's default `}<inlineCode parentName=\"p\">{`colors`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`fontFamily`}</inlineCode>{` while `}<strong parentName=\"p\">{`extending`}</strong>{` its base `}<inlineCode parentName=\"p\">{`flexGrow`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`zIndex`}</inlineCode>{`, you could add the following properties to your theme preset:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// my-theme-preset.js\n\nmodule.exports = {\n  theme: {\n    // Override Tailwind's default font family and colors\n    colors: {\n      gray: {\n        darkest: \"#1f2d3d\",\n        dark: \"#3c4858\",\n        DEFAULT: \"#c0ccda\",\n        light: \"#e0e6ed\",\n        lightest: \"#f9fafc\",\n      },\n    },\n    fontFamily: {\n      sans: ['\"Open Sans\"', \"sans-serif\"],\n    },\n    // Extend Tailwind's flexGrow and zIndex styles\n    extend: {\n      flexGrow: {\n        2: \"2\",\n        3: \"3\",\n      },\n      zIndex: {\n        60: \"60\",\n        70: \"70\",\n        80: \"80\",\n        90: \"90\",\n        100: \"100\",\n      },\n    },\n  },\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"customize-venia-base-styles\"\n    }}>{`Customize Venia base styles`}</h3>\n    <p>{`To override or extend the Venia base styles included in `}<inlineCode parentName=\"p\">{`@magento/pwa-theme-venia`}</inlineCode>{`, use `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/pwa-studio/blob/develop/packages/pwa-theme-venia/tailwind.preset.js#L21-L195\"\n      }}>{`Venia's tailwind.preset.js file`}</a>{` as a reference to its base styles.`}</p>\n    <p>{`For example, to `}<strong parentName=\"p\">{`override`}</strong>{` Venia's default `}<inlineCode parentName=\"p\">{`fontFamily`}</inlineCode>{` options and `}<strong parentName=\"p\">{`extend`}</strong>{` its default `}<inlineCode parentName=\"p\">{`backgroundColor`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`borderRadius`}</inlineCode>{`, you could add the following `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` properties to your preset:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// my-theme-preset.js\n\nmodule.exports = {\n  theme: {\n    extend: {\n      // Override Venia's default font family\n      fontFamily: {\n        sans: [\"Open Source\", \"sans-serif\"],\n        serif: [\"Gothic\", \"serif\"],\n      },\n      // Extend Venia's backgroundColor and borderRadius styles\n      backgroundColor: {\n        subtitle: \"#F5F5F5\",\n      },\n      borderRadius: {\n        radius4: \"50%\",\n      },\n    },\n  },\n};\n`}</code></pre>\n    <p>{`Another example: To change the width of Venia's sidebar filter on the search and category pages, you can override the `}<inlineCode parentName=\"p\">{`theme.extend.spacing.filterSidebarWidth`}</inlineCode>{`, as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// my-theme-preset.js\n\nmodule.exports = {\n  theme: {\n    extend: {\n      spacing: {\n        filterSidebarWidth: \"400px\",\n      },\n    },\n  },\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"useful-examples\"\n    }}>{`Useful examples`}</h2>\n    <p>{`The following extension examples show some additional useful customizations you can make to Tailwind and Venia base themes.`}</p>\n    <h3 {...{\n      \"id\": \"add-new-utility-classes\"\n    }}>{`Add new utility classes`}</h3>\n    <p>{`As described above with extensions, Tailwind gives you the ability to define new utility classes with your own values. You can use these values in your own custom CSS files for your custom components or style overrides for Venia components.`}</p>\n    <p>{`For example, you can add new `}<a parentName=\"p\" {...{\n        \"href\": \"https://tailwindcss.com/docs/height\"\n      }}>{`height utilities`}</a>{` by specifying entries for `}<inlineCode parentName=\"p\">{`theme.extend.height`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// my-theme-preset.js\n\nmodule.exports = {\n  theme: {\n    extend: {\n      height: {\n        customHeight: \"16rem\",\n      },\n    },\n  },\n};\n`}</code></pre>\n    <p>{`This creates a new height utility `}<inlineCode parentName=\"p\">{`height-customHeight`}</inlineCode>{`, which you can use in your project.`}</p>\n    <h3 {...{\n      \"id\": \"replace-existing-breakpoints\"\n    }}>{`Replace existing breakpoints`}</h3>\n    <p>{`You can replace existing breakpoint values by specifying entries for `}<inlineCode parentName=\"p\">{`theme.extend.screens`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// my-theme-preset.js\n\nmodule.exports = {\n  theme: {\n    extend: {\n      screens: {\n        lg: \"992px\",\n        max: \"2560\",\n      },\n    },\n  },\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}