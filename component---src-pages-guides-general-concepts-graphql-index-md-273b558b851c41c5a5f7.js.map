{"version":3,"file":"component---src-pages-guides-general-concepts-graphql-index-md-273b558b851c41c5a5f7.js","mappings":"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","sources":["webpack://commerce-pwa-studio/./src/pages/guides/general-concepts/graphql/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"graphql\"\n    }}>{`GraphQL`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://graphql.org/\"\n      }}>{`GraphQL`}</a>{` is a language for querying and manipulating data.\nIt is widely viewed as more powerful, flexible, and efficient than REST.`}</p>\n    <h2 {...{\n      \"id\": \"benefits-provided-by-graphql\"\n    }}>{`Benefits provided by GraphQL`}</h2>\n    <p>{`Using GraphQL provides the following benefits:`}</p>\n    <h3 {...{\n      \"id\": \"predictable-results-from-your-queries\"\n    }}>{`Predictable results from your queries`}</h3>\n    <p>{`A GraphQL query returns only data the user asks for in their query.`}</p>\n    <h3 {...{\n      \"id\": \"single-request-for-many-results\"\n    }}>{`Single request for many results`}</h3>\n    <p>{`A single request made through GraphQL can return any number of resources and their fields by following references between them as defined in the typed schema.`}</p>\n    <h3 {...{\n      \"id\": \"organized-data-with-a-typed-schema\"\n    }}>{`Organized data with a typed schema`}</h3>\n    <p>{`A single schema defines how users access data using GraphQL.\nThese schemas, formatted as JSON objects, let users know exactly how to get the data they need.`}</p>\n    <p>{`The following is an example of a schema that defines a `}<inlineCode parentName=\"p\">{`Species`}</inlineCode>{` type with `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`origin`}</inlineCode>{` fields:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Species {\n  name: String\n  origin: Planet\n}\ntype Planet {\n  name: String\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` The `}<inlineCode parentName=\"p\">{`origin`}</inlineCode>{` field is a `}<inlineCode parentName=\"p\">{`Planet`}</inlineCode>{` type, which also has a `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` field.`}</p>\n    <h2 {...{\n      \"id\": \"why-use-graphql-over-rest\"\n    }}>{`Why use GraphQL over REST`}</h2>\n    <p>{`While GraphQL and REST are both specifications for constructing and querying APIs, GraphQL has some significant advantages over REST.`}</p>\n    <h3 {...{\n      \"id\": \"no-versioning\"\n    }}>{`No versioning`}</h3>\n    <p>{`REST APIs typically have multiple versions, such as v1, v2, etc.\nThis is because updating endpoints in REST will often impact existing queries.`}</p>\n    <p>{`With GraphQL, there is no need for versioning, since new types and fields can be added to the schema without impacting existing queries.`}</p>\n    <p>{`Removing fields is done through deprecation instead of deleting them from the schema.\nIf an old query tries to read a deprecated field, GraphQL displays a customized warning.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type ExampleType {\n  firstName: String\n  lastName: String\n  name: String @deprecated(reason: \"Split this field into two. Use \\`firstName\\` and \\`lastName\\`\")\n}\n`}</code></pre>\n    <p>{`This prevents old queries from throwing confusing errors when trying to read outdated fields, lending to code maintainability.`}</p>\n    <h3 {...{\n      \"id\": \"faster-and-more-efficient\"\n    }}>{`Faster and more efficient`}</h3>\n    <p>{`REST APIs typically require loading from multiple URLs.\nImagine a REST API designed to get users and their forum posts.\n`}<inlineCode parentName=\"p\">{`users/<id>`}</inlineCode>{` would return information like `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`user/<id>/posts`}</inlineCode>{` would have to be queried separately to return the user's `}<inlineCode parentName=\"p\">{`comments`}</inlineCode>{`.`}</p>\n    <p>{`With GraphQL, these `}<inlineCode parentName=\"p\">{`types`}</inlineCode>{` and their `}<inlineCode parentName=\"p\">{`fields`}</inlineCode>{` are returned using one query, which saves calls to the API.`}</p>\n    <p>{`In the following schema example, a `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{` type contains a `}<inlineCode parentName=\"p\">{`posts`}</inlineCode>{` field, which is an array of `}<inlineCode parentName=\"p\">{`Post`}</inlineCode>{` types:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  user(id: Int): User\n  # This is our resolver; our entry into the query\n  # It lets us query \\`user\\` with an argument \\`id\\`\n  # And Expects to return a type \\`User\\`\n  # Yes, you can leave comments in schemas!\n}\n\ntype User {\n  id: Int!\n  name: String\n  posts: [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String\n  author: User\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` The exclamation mark (!) next to a field in the schema indicates it is `}<inlineCode parentName=\"p\">{`non-nullable`}</inlineCode>{`, which means the GraphQL service promises to always return a value for this field on a query.`}</p>\n    <p>{`A query for this schema that requests the name and all the post titles for a specific user would look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  user(id: 12345) {\n    name\n    posts {\n      title\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The data response for the query would look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"user\": {\n      \"name\":  \"Jane Doe\"\n      \"posts\": [\n         {\n           title: \"Hello World\"\n         },\n         {\n           title: \"I Love GraphQL\"\n         }\n      ]\n    }\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sample-queries\"\n    }}>{`Sample queries`}</h2>\n    <h3 {...{\n      \"id\": \"simple-query\"\n    }}>{`Simple query`}</h3>\n    <p>{`Imagine a database that simply contains an object `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{`, with the fields `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`phone`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  user: User\n}\n\ntype User {\n  name: String\n  email: String\n  phone: String\n}\n`}</code></pre>\n    <p>{`A simple query requesting this data would look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  user {\n    name\n    email\n    phone\n  }\n}\n`}</code></pre>\n    <p>{`The response to this query would look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"user\": {\n      \"name\":  \"Jane Doe\"\n      \"email\": \"JaneDoe@example.com\"\n      \"phone\": \"012-345-6789\"\n    }\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"custom-data-query\"\n    }}>{`Custom data query`}</h3>\n    <p>{`What if you don't need the `}<inlineCode parentName=\"p\">{`phone`}</inlineCode>{` number from `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{`?\nThe previous query can be rewritten to return specific fields:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n  user {\n    name\n    email\n  }\n}\n`}</code></pre>\n    <p>{`The response only provides the data requested:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"user\": {\n      \"name\":  \"Jane Doe\"\n      \"email\": \"JaneDoe@example.com\"\n    }\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"arguments-in-a-query\"\n    }}>{`Arguments in a query`}</h3>\n    <p>{`Now, what if you had multiple users and needed to grab a specific one using its `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`?\nWell, with GraphQL you can pass arguments into the query:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n user(id: 12345) {\n   id\n   name\n   email\n }\n}\n`}</code></pre>\n    <p>{`The response would look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"user\": {\n      \"id\": \"12345\"\n      \"name\": \"Jane Doe\"\n      \"email\": \"JaneDoe@example.com\"\n    }\n  }\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` The `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` field is requested in the response in this example, but this is optional.\nIt is used here to demonstrate that the correct user is returned.`}</p>\n    <h3 {...{\n      \"id\": \"query-connected-resources\"\n    }}>{`Query connected resources`}</h3>\n    <p>{`In this example, imagine that in our database a `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{` is associated with multiple hobbies.\nThe schema would look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n  user: User\n}\n\ntype User {\n  name: String\n  email: String\n  phone: String\n  hobbies: [Hobby]\n}\n\ntype Hobby {\n  name: String\n  frequency: String\n}\n`}</code></pre>\n    <p>{`The following query requests the hobbies associated with a specific user:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`{\n user(id: 12345) {\n   name\n   email\n   phone\n   hobbies {\n     name\n     frequency\n   }\n }\n}\n`}</code></pre>\n    <p>{`The response would look like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"data\": {\n    \"user\": {\n      \"name\":  \"Jane Doe\"\n      \"email\": \"JaneDoe@example.com\"\n      \"phone\": \"012-345-6789\"\n      \"hobbies\": [\n        {\n          \"name\": \"painting\",\n          \"frequency\": \"weekly\"\n        },\n        {\n          \"name\": \"video games\",\n          \"frequency\": \"daily\"\n        }\n      ]\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Notice how the user's `}<inlineCode parentName=\"p\">{`hobbies`}</inlineCode>{` are returned in an `}<inlineCode parentName=\"p\">{`array`}</inlineCode>{` as defined in the schema.`}</p>\n    <h2 {...{\n      \"id\": \"learn-more\"\n    }}>{`Learn more`}</h2>\n    <p>{`This topic just covers the basics of GraphQL.\nTo learn more, visit the `}<a parentName=\"p\" {...{\n        \"href\": \"https://graphql.org/\"\n      }}>{`GraphQL`}</a>{` website.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}