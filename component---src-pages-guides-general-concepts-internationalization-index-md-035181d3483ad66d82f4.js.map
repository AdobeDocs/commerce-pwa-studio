{"version":3,"file":"component---src-pages-guides-general-concepts-internationalization-index-md-035181d3483ad66d82f4.js","mappings":"iSAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,wBACH,yBACLA,EAAAA,EAAAA,KAAA,SAAK,gPAELA,EAAAA,EAAAA,KAAA,MACE,GAAM,oFACH,qFACLA,EAAAA,EAAAA,KAAA,SAAK,wWAGLA,EAAAA,EAAAA,KAAA,SAAK,4DAA0DA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACzE,KAAQ,0EACL,yBAA6B,MACpCH,EAAAA,EAAAA,KAAA,SAAK,kTAELA,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACH,iBACLA,EAAAA,EAAAA,KAAA,SAAK,uEAAqEA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACpF,KAAQ,6GACL,kBAAsB,wHAE7BH,EAAAA,EAAAA,KAAA,SAAK,+DAA6DA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC5E,KAAQ,wCACL,cAAkB,mBACvBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,kBAA+B,wDAAsDH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC9H,KAAQ,gEACL,gBAAoB,4CAC3BH,EAAAA,EAAAA,KAAA,SAAK,+BAA6BA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC5C,KAAQ,yDACL,mBAAuB,SAAOH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC/C,KAAQ,mEACL,oBAAwB,gDAA8CH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,kBAA+B,2CACvGH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,MAAmB,WAASH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,kBAA+B,6DACvJH,EAAAA,EAAAA,KAAA,SAAK,yDACLA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,gBACV,oKASPH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,gBACV,gLAOPH,EAAAA,EAAAA,KAAA,SAAK,8BAA4BA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,MAAmB,0GAAwGH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,kBAA+B,MACrPH,EAAAA,EAAAA,KAAA,MACE,GAAM,4BACH,6BACLA,EAAAA,EAAAA,KAAA,SAAK,wPAGLA,EAAAA,EAAAA,KAAA,MACE,GAAM,mBACH,oBACLA,EAAAA,EAAAA,KAAA,SAAK,uCAAqCA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,QAAqB,+DAC5FH,EAAAA,EAAAA,KAAA,SAAK,mBAAiBA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAChC,KAAQ,mDACL,6BAAiC,mFAC1CH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,6DAA0E,oBAC1FH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,cAA2B,MAAIH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,cAA2B,MAAIH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,cAA2B,MAC3LH,EAAAA,EAAAA,KAAA,MACE,GAAM,cACH,eACLA,EAAAA,EAAAA,KAAA,SAAK,iJAELA,EAAAA,EAAAA,KAAA,SAAK,qCAAmCA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAM,uBAAgC,kGAEjGH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBACV,uHAKPH,EAAAA,EAAAA,KAAA,SAAK,0GACLA,EAAAA,EAAAA,KAAA,SAAK,iKAC8DA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,SAAsB,oEACtHH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBACV,qEAKPH,EAAAA,EAAAA,KAAA,SAAK,sQAELA,EAAAA,EAAAA,KAAA,MACE,GAAM,kBACH,mBACLA,EAAAA,EAAAA,KAAA,SAAK,sCAAoCA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACnD,KAAQ,qDACL,kBAAsB,uBAAqBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,cAA2B,+GAE1GH,EAAAA,EAAAA,KAAA,SAAK,sEAAoEA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,UAAuB,iBAAeH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,oBAAiC,gBAC1MH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,gBACV,6JAUPH,EAAAA,EAAAA,KAAA,SAAK,mBAAiBA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,mBAAgC,mEACnFH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,gBACV,0IAKPH,EAAAA,EAAAA,KAAA,SAAK,8BAA4BA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC3C,KAAQ,qDACL,kBAAsB,gCAC7BH,EAAAA,EAAAA,KAAA,MACE,GAAM,iCACH,kCACLA,EAAAA,EAAAA,KAAA,SAAK,qIAELA,EAAAA,EAAAA,KAAA,SAAK,4LACLA,EAAAA,EAAAA,KAAA,SAAK,gFACLA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAO,2CACtBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAO,gDAA8CH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAO,QAAqB,aAAWH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAO,QAAqB,qBACrLH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAO,4BAA0BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAO,QAAqB,eACnGH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAO,QAAMH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAO,QAAqB,wEAGjFH,EAAAA,EAAAA,KAAA,MACE,GAAM,iBACH,kBACLA,EAAAA,EAAAA,KAAA,SAAK,kHACLA,EAAAA,EAAAA,KAAA,SAAK,iHACLA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OACbH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,MAAO,cAAYH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,QAAqB,mDAAiDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,QAAqB,yBAAuBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,mBAAgC,WAE5QH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OACbH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,MAAO,8CAA4CH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,QAAqB,gBAErHH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OACbH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,MAAO,iGAEvBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OACbH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,MAAO,qFACrBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,OAAKH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAM,SAAkB,qHAEhEH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OACbH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,MAAO,6DAA2DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,uBAAoC,eAEnJH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,OACbH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,MAAO,2EAGzBH,EAAAA,EAAAA,KAAA,MACE,GAAM,mBACH,oBACLA,EAAAA,EAAAA,KAAA,SAAK,wBAAsBA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,kBAA+B,wBAAsBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,uBAAoC,0EAC9KH,EAAAA,EAAAA,KAAA,SAAK,gSAELA,EAAAA,EAAAA,KAAA,SAAK,gEAA8DA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAM,mBAAgC,wGAGpI,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://commerce-pwa-studio/./src/pages/guides/general-concepts/internationalization/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"internationalization\"\n    }}>{`Internationalization`}</h1>\n    <p>{`Internationalization (i18n) is a feature that lets you localize content for a culture, region, or language.\nThis feature is often associated with localization (l10n), which is the process of transforming content for a specific locale.`}</p>\n    <h2 {...{\n      \"id\": \"internationalization-in-adobe-commerce-and-magento-open-source-versus-pwa-studio\"\n    }}>{`Internationalization in Adobe Commerce and Magento Open Source versus PWA Studio`}</h2>\n    <p>{`The Adobe Commerce and Magento Open Source applications include an i18n feature that provides translated text to the frontend theme.\nThis feature uses dictionary files inside language packages to provide translation data for the application when it renders a page.\nThe language packages themselves are extensions the application installs using Composer.`}</p>\n    <p>{`For more information, see the core documentation topic: `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/frontend-core/guide/translations/\"\n      }}>{`Translations overview`}</a>{`.`}</p>\n    <p>{`The tight coupling between each applications' i18n feature and the frontend theme makes it difficult to use the same translation mechanisms in PWA Studio storefronts.\nInstead, PWA Studio provides its own i18n feature that follows a similar design as the one in Adobe Commerce and Magento Open Source.`}</p>\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How it works`}</h2>\n    <p>{`PWA Studio provides a context provider for translations called the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/App/localeProvider.js\"\n      }}>{`LocaleProvider`}</a>{`.\nThis context provider contains translation data from dictionary files and supplies them to its child components.`}</p>\n    <p>{`The i18n feature in PWA Studio is an implementation of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://formatjs.io/docs/react-intl/\"\n      }}>{`react-intl`}</a>{` library.\nThe `}<inlineCode parentName=\"p\">{`LocaleProvider`}</inlineCode>{` component in PWA Studio wraps around the library's `}<a parentName=\"p\" {...{\n        \"href\": \"https://formatjs.io/docs/react-intl/components/#intlprovider\"\n      }}>{`IntlProvider`}</a>{` and provides it with translation data.`}</p>\n    <p>{`This library also provides `}<a parentName=\"p\" {...{\n        \"href\": \"https://formatjs.io/docs/react-intl/api#formatmessage\"\n      }}>{`formatMessage()`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://formatjs.io/docs/react-intl/components#formattedmessage\"\n      }}>{`FormattedMessage`}</a>{` to localize text in child components under `}<inlineCode parentName=\"p\">{`LocaleProvider`}</inlineCode>{`.\nYou must at least supply values for `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`defaultMessage`}</inlineCode>{` fallback when you use either the function or component.`}</p>\n    <p>{`The following code samples produce the same results:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`return (\n  <p className={classes.text}>\n    <FormattedMessage\n      id={\"component.loremIpsum\"}\n      defaultMessage={\"Lorem Ipsum\"}\n    />\n  </p>\n);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const translatedText = formatMessage({\n  id: \"component.loremIpsum\",\n  defaultMessage: \"Lorem Ipsum\",\n});\n\nreturn <p className={classes.text}>{translatedText}</p>;\n`}</code></pre>\n    <p>{`The i18n feature uses the `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` parameter to look up the localized text from the dictionary files, which the feature supplies to the `}<inlineCode parentName=\"p\">{`LocaleProvider`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"translation-dictionaries\"\n    }}>{`Translation dictionaries`}</h2>\n    <p>{`Translation dictionary files contain key/value pairs for localized text.\nPWA Studio's i18n feature uses a similar dictionary approach for translation files as Adobe Commerce and Magento Open Source, but\ninstead of a CSV format, it uses JSON.`}</p>\n    <h3 {...{\n      \"id\": \"filename-format\"\n    }}>{`Filename format`}</h3>\n    <p>{`Dictionary files must be inside an `}<inlineCode parentName=\"p\">{`i18n`}</inlineCode>{` directory and use their target locale for their filename.`}</p>\n    <p>{`Instead of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/IETF_language_tag\"\n      }}>{`standard ISO language tag`}</a>{` the filename format follow's the following convention for specifying locale:\n`}<inlineCode parentName=\"p\">{`<language id in lowercase>_<country id in uppercase>.json`}</inlineCode>{`.\nFor example: `}<inlineCode parentName=\"p\">{`en_US.json`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`en_GB.json`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`fr_FR.json`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"id-formats\"\n    }}>{`ID formats`}</h3>\n    <p>{`The JSON object's keys act as unique IDs for localized text.\nThey map a placeholder string value in components to the actual rendered text.`}</p>\n    <p>{`PWA Studio recommends and uses a `}<strong parentName=\"p\">{`dot notation format`}</strong>{` in its components.\nThis format uses the component name and descriptor to form the ID value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"accountMenu.orderHistoryLink\": \"Order History\",\n  \"autocomplete.resultSummary\": \"{resultCount} items\"\n}\n`}</code></pre>\n    <p>{`This approach helps identify which component renders the text and provides a unique value for the ID.`}</p>\n    <p>{`However, the i18n feature in PWA Studio does not limit you to the dot notation format.\nFor example, in Adobe Commerce and Magento Open Source, the original `}<inlineCode parentName=\"p\">{`en_US`}</inlineCode>{` locale text identifies the translated text in the application.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"About Us\": \"About Us\",\n  \"Hi, {name}\": \"Hi, {name}\"\n}\n`}</code></pre>\n    <p>{`PWA Studio's i18n feature allows you to use this notation in your own components and storefront.\nBoth approach have their pros and cons, and developers are free to choose which approach works for them when they develop their own components and storefronts.`}</p>\n    <h3 {...{\n      \"id\": \"message-syntax\"\n    }}>{`Message syntax`}</h3>\n    <p>{`The i18n feature accepts the same `}<a parentName=\"p\" {...{\n        \"href\": \"https://formatjs.io/docs/core-concepts/icu-syntax\"\n      }}>{`message syntax`}</a>{` as the underlying `}<inlineCode parentName=\"p\">{`react-intl`}</inlineCode>{` library.\nAlong with static text, this syntax supports variables, dates, and even conditional formatting.`}</p>\n    <p>{`To translate text with variables, pass in a mapping object to the `}<inlineCode parentName=\"p\">{`values`}</inlineCode>{` prop in the `}<inlineCode parentName=\"p\">{`FormattedMessage`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`return (\n  <FormattedMessage\n    id=\"component.greeting\"\n    defaultMessage=\"Hi, {name}\"\n    values={{\n      name: \"Veronica\",\n    }}\n  />\n);\n`}</code></pre>\n    <p>{`When using the `}<inlineCode parentName=\"p\">{`formatMessage()`}</inlineCode>{` function, pass in the mapping object as the second parameter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const text = formatMessage(\n    { id:\"component.greeting\", defaultMessage=\"Hi, {name}\"},\n    { name: currentUser.firstname }\n);\n`}</code></pre>\n    <p>{`For more details, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://formatjs.io/docs/core-concepts/icu-syntax\"\n      }}>{`message syntax`}</a>{` documentation at FormatJS.`}</p>\n    <h2 {...{\n      \"id\": \"language-packages-and-plugins\"\n    }}>{`Language packages and plugins`}</h2>\n    <p>{`Language packages provide translation data for one or more locales.\nThey are also used to override the text in the same locale.`}</p>\n    <p>{`Unlike the Adobe Commerce and Magento Open Source applications, which install language packages through Composer, PWA Studio storefronts install language packages as NPM dependencies.`}</p>\n    <p>{`An NPM dependency is a language package if it meets the following criteria:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The package contains an intercept file`}</li>\n      <li parentName=\"ul\">{`The intercept file sets the special feature `}<inlineCode parentName=\"li\">{`i18n`}</inlineCode>{` flag to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` for the package`}</li>\n      <li parentName=\"ul\">{`The package contains an `}<inlineCode parentName=\"li\">{`i18n`}</inlineCode>{` directory`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`i18n`}</inlineCode>{` directory contains a dictionary file with a locale formatted name`}</li>\n    </ul>\n    {/* TODO: Create an in-depth tutorial for creating a language package extension */}\n    <h2 {...{\n      \"id\": \"build-process\"\n    }}>{`Build process`}</h2>\n    <p>{`To optimize runtime performance, the i18n feature compiles all the translation data during the build process.`}</p>\n    <p>{`The following is a high level summary of the actions the i18n feature takes to compile the translation data:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Scans all `}<inlineCode parentName=\"p\">{`i18n`}</inlineCode>{` folders within installed modules that declare `}<inlineCode parentName=\"p\">{`i18n`}</inlineCode>{` support through the `}<inlineCode parentName=\"p\">{`specialFeatures`}</inlineCode>{` flag`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Scans the project's root directory for an `}<inlineCode parentName=\"p\">{`i18n`}</inlineCode>{` directory`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Generates an object with locales as keys that map to an array of files matching that locale`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Merges the files in the arrays to create a single dictionary object for a locale`}</p>\n        <p parentName=\"li\"><strong parentName=\"p\">{`NOTE:`}</strong>{` The dictionary files in the project itself are the last files merged and the final overrides for translations.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Creates a virtual module from this object that exposes a `}<inlineCode parentName=\"p\">{`__fetchLocaleData__`}</inlineCode>{` function`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Generates a dynamic import in the application for the virtual module`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"runtime-process\"\n    }}>{`Runtime process`}</h2>\n    <p>{`During runtime, the `}<inlineCode parentName=\"p\">{`LocaleProvider`}</inlineCode>{` component uses the `}<inlineCode parentName=\"p\">{`__fetchLocaleData__`}</inlineCode>{` function to get the correct translation data for the current locale.`}</p>\n    <p>{`If a components changes the value of the current locale during runtime, the application sends a GraphQL query to verify the new value.\nEven if you install a language package plugin for a locale, you must enable the locale on the backend to use the translations in the storefront UI.`}</p>\n    <p>{`For example, if you use a store switcher and you provide an `}<inlineCode parentName=\"p\">{`i18n/fr_FR.json`}</inlineCode>{` file, you must enable the French locale in the backend application to make the store switcher work.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}