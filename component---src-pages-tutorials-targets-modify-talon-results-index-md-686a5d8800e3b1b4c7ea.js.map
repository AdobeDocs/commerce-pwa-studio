{"version":3,"sources":["webpack://commerce-pwa-studio/./src/pages/tutorials/targets/modify-talon-results/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-tutorials-targets-modify-talon-results-index-md-686a5d8800e3b1b4c7ea.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"modify-talon-results\"\n    }}>{`Modify talon results`}</h1>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/api/peregrine/extension-points/wrappable-talons/\"\n      }}>{`talons target`}</a>{` in Peregrine exposes talons as wrappable modules.\nThis lets you define a wrapper module that intercepts a talon and let you modify the results.`}</p>\n    <h2 {...{\n      \"id\": \"background\"\n    }}>{`Background`}</h2>\n    <p>{`In core Adobe Commerce and Magento Open Source development:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`A plugin, or interceptor, is a class that modifies the behavior of public class functions by intercepting a function call and running code before, after, or around that function call.\nThis allows you to substitute or extend the behavior of original, public methods for any class or interface.`}</p>\n    </blockquote>\n    <p>{`See: `}<a parentName=\"p\" {...{\n        \"href\": \"https://devdocs.magento.com/guides/v2.4/extension-dev-guide/plugins.html\"\n      }}>{`Plugins (Interceptors)`}</a></p>\n    <p>{`PWA Studio's extensibility framework provides a similar feature that allows you to intercept a talon call and surround it with custom logic.\nThis is useful if you want to add tracking logic or alter the incoming or outgoing values for a talon.`}</p>\n    <p>{`This tutorial teaches you how to create an extension that intercepts a talon and changes the results.`}</p>\n    <h2 {...{\n      \"id\": \"tasks-overview\"\n    }}>{`Tasks overview`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Initialize the project`}</li>\n      <li parentName=\"ol\">{`Create and register an intercept file`}</li>\n      <li parentName=\"ol\">{`Define the intercept file`}</li>\n      <li parentName=\"ol\">{`Make a data fetch hook`}</li>\n      <li parentName=\"ol\">{`Create the talon wrapper module`}</li>\n      <li parentName=\"ol\">{`Update the package entry point`}</li>\n      <li parentName=\"ol\">{`Test on a local instance`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"initialize-the-project\"\n    }}>{`Initialize the project`}</h2>\n    <p>{`To intercept and wrap a talon, you need a PWA Studio extension.\nUse `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.npmjs.com/cli/init\"\n      }}><inlineCode parentName=\"a\">{`npm init`}</inlineCode></a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"https://classic.yarnpkg.com/en/docs/cli/init/\"\n      }}><inlineCode parentName=\"a\">{`yarn init`}</inlineCode></a>{` to create a new JavaScript package project for this tutorial.\nSince, this is a standalone project, you do not need to create this inside a storefront project.`}</p>\n    <p>{`Edit the `}<inlineCode parentName=\"p\">{`packages.json`}</inlineCode>{` file so it looks like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"name\": \"my-extension\",\n  \"version\": \"0.0.1\",\n  \"description\": \"A PWA Studio extension\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"main\": \"index.js\",\n  \"license\": \"(OSL-3.0 OR AFL-3.0)\",\n  \"repository\": \"\",\n  \"dependencies\": {},\n  \"peerDependencies\": {\n    \"@magento/peregrine\": \"~7.0.0\",\n    \"@magento/pwa-buildpack\": \"~6.0.0\",\n    \"@magento/venia-ui\": \"~4.0.0\",\n    \"apollo-client\": \"2.6.4\",\n    \"graphql-tag\": \"~2.10.1\",\n    \"react\": \"~17.0.1\",\n    \"webpack\": \"~4.38.0\"\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-and-register-the-intercept-file\"\n    }}>{`Create and register the intercept file`}</h2>\n    <p>{`You can create the intercept file anywhere in your project.\nFor this tutorial, create this file under `}<inlineCode parentName=\"p\">{`src/targets`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`mkdir -p src/targets && touch src/targets/my-intercept.js\n`}</code></pre>\n    <p>{`Set the value for `}<inlineCode parentName=\"p\">{`pwa-studio.targets.intercept`}</inlineCode>{` in your project's `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file to tell the build process where to find the intercept file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`    \"react\": \"~17.0.1\",\n    \"webpack\": \"~4.38.0\"\n  },\n+ \"pwa-studio\": {\n+   \"targets\": {\n+     \"intercept\": \"src/targets/my-intercept\"\n+   }\n+ }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"define-the-intercept-file\"\n    }}>{`Define the intercept file`}</h2>\n    <p>{`The intercept file is where you tap into PWA Studio's extensibility framework and add your modifications.`}</p>\n    <p>{`In your intercept file, add the following content:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = (targets) => {\n  // Wrap the useProductFullDetail talon with this extension\n  const peregrineTargets = targets.of(\"@magento/peregrine\");\n  const talonsTarget = peregrineTargets.talons;\n\n  talonsTarget.tap((talonWrapperConfig) => {\n    talonWrapperConfig.ProductFullDetail.useProductFullDetail.wrapWith(\n      \"my-extension\"\n    );\n  });\n\n  // Set the buildpack features required by this extension\n  const builtins = targets.of(\"@magento/pwa-buildpack\");\n  builtins.specialFeatures.tap((featuresByModule) => {\n    featuresByModule[\"@my-extension/my-product-page\"] = {\n      // Wrapper modules must be ES Modules\n      esModules: true,\n    };\n  });\n};\n`}</code></pre>\n    <p>{`When this file runs, it taps into the `}<inlineCode parentName=\"p\">{`talonsTarget`}</inlineCode>{` from the available targets in `}<inlineCode parentName=\"p\">{`@magento/peregrine`}</inlineCode>{` and wraps the `}<inlineCode parentName=\"p\">{`useProductFullDetail()`}</inlineCode>{` function call with your extension.`}</p>\n    <p>{`Since talon wrappers must be ES modules, this file also taps into the `}<inlineCode parentName=\"p\">{`specialFeatures`}</inlineCode>{` target from `}<inlineCode parentName=\"p\">{`@magento/pwa-buildpack`}</inlineCode>{` to set the `}<inlineCode parentName=\"p\">{`esModules`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"make-a-data-fetch-hook\"\n    }}>{`Make a data fetch hook`}</h2>\n    <p>{`Create a data fetch hook to query the backend for more data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`mkdir -p src/hooks && touch src/hooks/useProductCategoriesList.js\n`}</code></pre>\n    <p>{`Inside the `}<inlineCode parentName=\"p\">{`useProductCategoriesList.js`}</inlineCode>{` file, add the following content:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useMemo } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nconst GET_PRODUCT_CATEGORIES = gql\\`\n  query getProductCategories($urlKey: String!) {\n    products(filter: { url_key: { eq: $urlKey } }) {\n      items {\n        categories {\n          name\n          url_path\n        }\n      }\n    }\n  }\n\\`;\nconst useProductCategoriesList = (props) => {\n  const { urlKey } = props;\n\n  const { error, loading, data } = useQuery(GET_PRODUCT_CATEGORIES, {\n    fetchPolicy: \"cache-and-network\",\n    nextFetchPolicy: \"cache-first\",\n    variables: {\n      urlKey: urlKey,\n    },\n  });\n\n  const categories = useMemo(() => {\n    if (data && data.products.items[0]) {\n      return data.products.items[0].categories;\n    }\n    return null;\n  }, [data]);\n\n  return {\n    error,\n    isLoading: loading,\n    categories,\n  };\n};\n\nexport default useProductCategoriesList;\n`}</code></pre>\n    <p>{`This code defines a GraphQL query that fetches a list of category names and URL for a product at a specific URL key.\nIt returns a hook that sends the query to the backend and returns data about the request, which includes the results.`}</p>\n    <h2 {...{\n      \"id\": \"create-the-talon-wrapper-module\"\n    }}>{`Create the talon wrapper module`}</h2>\n    <p>{`A talon wrapper module wraps around an existing talon and injects code around the implementation logic the talon executes.`}</p>\n    <p>{`You can define this module anywhere in your project, but for this tutorial create it under `}<inlineCode parentName=\"p\">{`src/targets`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`touch src/targets/wrapper.js\n`}</code></pre>\n    <p>{`Inside `}<inlineCode parentName=\"p\">{`wrapper.js`}</inlineCode>{`, add the following content:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useProductCategoriesList from \"../hooks/useProductCategoriesList\";\n\nconst wrapUseProductFullDetails = (original) => {\n  return function useProductFullDetails(props, ...restArgs) {\n    console.log(\"Calling new useProductFullDetails() function!\");\n\n    const { product } = props;\n\n    const categoriesListData = useProductCategoriesList({\n      urlKey: product.url_key,\n    });\n\n    const { productDetails, ...defaultReturnData } = original(\n      props,\n      ...restArgs\n    );\n\n    return {\n      ...defaultReturnData,\n      productDetails: {\n        ...productDetails,\n        categoriesList: categoriesListData,\n      },\n    };\n  };\n};\n\nexport default wrapUseProductFullDetails;\n`}</code></pre>\n    <p>{`This module exports a function that returns a new `}<inlineCode parentName=\"p\">{`useProductFullDetails()`}</inlineCode>{` function.\nWhenever a component calls the original `}<inlineCode parentName=\"p\">{`useProductFullDetails()`}</inlineCode>{` talon, it calls this new function instead.`}</p>\n    <p>{`The module imports and uses the `}<inlineCode parentName=\"p\">{`useProductCategoriesList()`}</inlineCode>{` hook defined in a previous step to get the `}<inlineCode parentName=\"p\">{`categoriesListData`}</inlineCode>{`, which contains information about the request.\nThe code uses the `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` normally passed into the `}<inlineCode parentName=\"p\">{`original`}</inlineCode>{` function to get the value of the `}<inlineCode parentName=\"p\">{`urlKey`}</inlineCode>{` for the GraphQL request.`}</p>\n    <p>{`The extensibility framework provides the `}<inlineCode parentName=\"p\">{`original`}</inlineCode>{` talon function when it executes the wrapper module.\nThe new `}<inlineCode parentName=\"p\">{`useProductFullDetails()`}</inlineCode>{` function calls this function and uses the props data result as a starting point for the final returned value.`}</p>\n    <p>{`The final return value is combination of the original props data and the categories list data returned by the hook.`}</p>\n    <h2 {...{\n      \"id\": \"update-the-package-entry-point\"\n    }}>{`Update the package entry point`}</h2>\n    <p>{`Update the `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file and set the main entry point to the talon wrapper module.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n- \"main\": \"index.js\",\n+ \"main\": \"src/targets/wrapper.js\",\n  \"license\": \"(OSL-3.0 OR AFL-3.0)\",\n`}</code></pre>\n    <p>{`This indicates which module to return when another project uses this package as a dependency.\nThis is an important step because the intercept file in this project tells the extensibility framework to wrap the `}<inlineCode parentName=\"p\">{`useProductFullDetails()`}</inlineCode>{` talon with the module this package provides.`}</p>\n    <h2 {...{\n      \"id\": \"test-on-a-local-instance\"\n    }}>{`Test on a local instance`}</h2>\n    <p>{`Install this extension in a local storefront project to test its functionality.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`yarn add --dev file:/path/to/your/extension/project\n`}</code></pre>\n    <p>{`This will add a `}<inlineCode parentName=\"p\">{`devDependencies`}</inlineCode>{` entry to your storefront project's `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` that looks like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`  \"memory-fs\": \"~0.4.1\",\n+ \"my-extension\": \"file:/path/to/your/extension/project\"\n  \"prettier\": \"~1.16.4\",\n`}</code></pre>\n    <p>{`Now, when you navigate to a product page, the following message appears in the console:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`\"Calling new useProductFullDetails() function!\".\n`}</code></pre>\n    <p>{`Use additional `}<inlineCode parentName=\"p\">{`console.log()`}</inlineCode>{` calls to verify the application calls the data fetch hook.`}</p>\n    <p>{`To test the new props data the wrapped talon returns, you will need to create a copy of the ProductFullDetails component and alter it to log or render the new data.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}