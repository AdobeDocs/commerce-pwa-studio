{"version":3,"file":"component---src-pages-integrations-pagebuilder-custom-components-add-aggregator-index-md-f0f67be3f3af4c4be1ad.js","mappings":"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","sources":["webpack://commerce-pwa-studio/./src/pages/integrations/pagebuilder/custom-components/add-aggregator/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-aggregator\"\n    }}>{`Add aggregator`}</h1>\n    <p>{`The purpose of the configuration aggregator (`}<inlineCode parentName=\"p\">{`configAggregator`}</inlineCode>{`) is to retrieve properties from a content type's HTML and return those properties as a flat object of `}<inlineCode parentName=\"p\">{`key:values`}</inlineCode>{`. The framework (specifically the `}<inlineCode parentName=\"p\">{`<ContentTypeFactory />`}</inlineCode>{`) then passes this object to your component, where you can assign the properties to your component's corresponding properties for rendering within a PWA Studio app.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-pwa-studio/assets/d7b1b5648a946bb171b43bee0a28a7b2/AddAggregatorOverview.svg\",\n        \"alt\": \"Aggregator Overview\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"content-type-html\"\n    }}>{`Content type HTML`}</h2>\n    <p>{`The key to building out your aggregator is knowing the structure, content, and properties available in your content type's master format. You can do this the hard way by looking in the database of your Adobe Commerce or Magento Open Source backend instance (specifically, the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` field in the `}<inlineCode parentName=\"p\">{`cms_page`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`cms_block`}</inlineCode>{` tables). But there is a better way.`}</p>\n    <p><strong parentName=\"p\">{`Protip`}</strong>{`: Place a `}<inlineCode parentName=\"p\">{`console.log(node)`}</inlineCode>{` at the top of your `}<inlineCode parentName=\"p\">{`configAggregator`}</inlineCode>{` function so you can see exactly what your content type's HTML (the `}<inlineCode parentName=\"p\">{`HTMLElement`}</inlineCode>{` passed by the framework) looks like. In the `}<inlineCode parentName=\"p\">{`ExampleQuote`}</inlineCode>{` starter code, you would add it as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default (node, props) => {\n  console.log(node);\n  return {\n    // Retrieve properties from node here\n  };\n};\n`}</code></pre>\n    <p>{`The console output should look something like this:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"936px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"11.5625%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-pwa-studio/static/00591eec8e34a19d6e8354041d77dec9/5530d/AggregatorHTMLConsoleOutput.webp 320w\", \"/commerce-pwa-studio/static/00591eec8e34a19d6e8354041d77dec9/0c8fb/AggregatorHTMLConsoleOutput.webp 640w\", \"/commerce-pwa-studio/static/00591eec8e34a19d6e8354041d77dec9/a7d94/AggregatorHTMLConsoleOutput.webp 936w\"],\n            \"sizes\": \"(max-width: 936px) 100vw, 936px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-pwa-studio/static/00591eec8e34a19d6e8354041d77dec9/dd4a7/AggregatorHTMLConsoleOutput.png 320w\", \"/commerce-pwa-studio/static/00591eec8e34a19d6e8354041d77dec9/0f09e/AggregatorHTMLConsoleOutput.png 640w\", \"/commerce-pwa-studio/static/00591eec8e34a19d6e8354041d77dec9/6d612/AggregatorHTMLConsoleOutput.png 936w\"],\n            \"sizes\": \"(max-width: 936px) 100vw, 936px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/commerce-pwa-studio/static/00591eec8e34a19d6e8354041d77dec9/6d612/AggregatorHTMLConsoleOutput.png\",\n            \"alt\": \"Content type HTML\",\n            \"title\": \"Content type HTML\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` (HTMLElement) passed to the aggregator contains only your content type's HTML from the master format, not the entire master format as you would find in the database.`}</p>\n    <h2 {...{\n      \"id\": \"the-aggregator\"\n    }}>{`The Aggregator`}</h2>\n    <p>{`The interface for a `}<inlineCode parentName=\"p\">{`configAggregator`}</inlineCode>{` is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`(node: HTMLElement, props: {contentType: string, appearance: string}) => {[key: string]: any}\n`}</code></pre>\n    <p>{`To recap, the purpose of your component's aggregator is to collect (aggregate) properties from your content type's HTML and return a property object for use in your component. The object you return should contain all the text, html, inline styles, and classes you need to faithfully reproduce your content type as a component in PWA Studio.`}</p>\n    <p>{`Let's look at our Quote content HTML in detail (color coded for easier analysis) to determine the properties we want to pass to our component:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-pwa-studio/assets/4b11a7f9a20521cc0d68d0b21745c83a/MasterFormatHTML.svg\",\n        \"alt\": \"Master format HTML\"\n      }}></img></p>\n    <p>{`Here's what we think we need for our component:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The inline `}<strong parentName=\"li\">{`styles`}</strong>{` from the main node`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`text`}</strong>{` content from the `}<inlineCode parentName=\"li\">{`<blockquote>`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`author`}</inlineCode>{` nodes`}</li>\n      <li parentName=\"ul\">{`The `}<strong parentName=\"li\">{`HTML`}</strong>{` content from the `}<inlineCode parentName=\"li\">{`description`}</inlineCode>{` node`}</li>\n      <li parentName=\"ul\">{`The CSS `}<strong parentName=\"li\">{`classes`}</strong>{` from all three child nodes (`}<inlineCode parentName=\"li\">{`<blockquote>`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`author`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`description`}</inlineCode>{`)`}</li>\n    </ul>\n    <p>{`To retrieve these properties, you'll want to use a combination of `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\"\n      }}>{`HTMLElement DOM properties`}</a>{` along with our `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/integrations/pagebuilder/utility-functions/\"\n      }}>{`utility functions`}</a>{`, as shown next in the example.`}</p>\n    <h3 {...{\n      \"id\": \"example-aggregator\"\n    }}>{`Example aggregator`}</h3>\n    <p>{`Here is the aggregator we use for the `}<inlineCode parentName=\"p\">{`ExampleQuote`}</inlineCode>{` component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { getAdvanced } from \"../../utils\";\n\nexport default (node, props) => {\n  console.log(node);\n\n  return {\n    quote: node.childNodes[0].textContent,\n    author: node.childNodes[1].textContent,\n    description: node.childNodes[2].innerHTML,\n    ...getAdvanced(node),\n  };\n};\n`}</code></pre>\n    <p>{`First we `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{` the `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/integrations/pagebuilder/utility-functions/\"\n      }}>{`utility functions`}</a>{` we want to use. In our case, we know that our Quote content type provides end users with the Advanced form section. So we import the `}<inlineCode parentName=\"p\">{`getAdvanced()`}</inlineCode>{` function from `}<inlineCode parentName=\"p\">{`utils.js`}</inlineCode>{`. This function is a wrapper that just runs a number of other utility functions that can be used independently if these values are on different nodes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export function getAdvanced(node) {\n  return {\n    ...getPadding(node),\n    ...getMargin(node),\n    ...getBorder(node),\n    ...getTextAlign(node),\n    ...getCssClasses(node),\n    ...getIsHidden(node),\n  };\n}\n`}</code></pre>\n    <p>{`Then we use the `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` names from the content type HTML (color coded in green above) as our property key names: `}<inlineCode parentName=\"p\">{`quote`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`author`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{`. Naming your properties like this helps to identify where the data in the component comes from.`}</p>\n    <p>{`Next, we use the `}<inlineCode parentName=\"p\">{`textContent`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`innerHTML`}</inlineCode>{` DOM properties to grab the text and html values from the appropriate `}<inlineCode parentName=\"p\">{`childNodes`}</inlineCode>{`.`}</p>\n    <p>{`Finally, we use the `}<inlineCode parentName=\"p\">{`getAdvanced()`}</inlineCode>{` utility function to retrieve all the property values from the Advanced section of our content type's form and use the spread operator `}<inlineCode parentName=\"p\">{`(...)`}</inlineCode>{` to expand them into the current object.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The Quote content type also has a form section called Background (from the `}<inlineCode parentName=\"p\">{`pagebuilder_base_form_with_background_attributes`}</inlineCode>{` form). This section of the form allows end users to enter all kinds of background attributes, such as images, colors, positions and so on. If your custom content uses the Background section, you should retrieve the those attributes using the `}<inlineCode parentName=\"p\">{`getBackgroundImages(node)`}</inlineCode>{` utility function. However, to keep things simple for our component, we decided not to pull these attributes from the HTML.`}</p>\n    <h3 {...{\n      \"id\": \"retrieving-data-from-different-appearances\"\n    }}>{`Retrieving data from different Appearances`}</h3>\n    <p>{`If your content type has different appearances, the HTML for each appearance will also differ. To handle these differences, we provide the `}<inlineCode parentName=\"p\">{`appearance`}</inlineCode>{` within the `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` argument so you can modify your queries in order to retrieve data from the correct node.`}</p>\n    <p>{`For our Quote content type, we only have one appearance (the default); so we do not need to use it. However, the Row content type has three appearances, so it uses a conditional based on the `}<inlineCode parentName=\"p\">{`props.appearance`}</inlineCode>{` value to determine the correct node to use, as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Targeting appearances in the Row aggregator\n\nexport default (node, props) => {\n    // Determine which node holds the data for the appearance\n    const dataNode =\n        props.appearance === 'contained' ? node.childNodes[0] : node;\n    return {\n        minHeight: dataNode.style.minHeight ? dataNode.style.minHeight : null,\n        ...\n    };\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-the-aggregator\"\n    }}>{`Test the aggregator`}</h2>\n    <p>{`The best way to see the properties returned by your aggregator is using `}<inlineCode parentName=\"p\">{`console.log()`}</inlineCode>{`. For our Quote aggregator, we can do something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { getAdvanced, getCssClasses, getBackgroundImages } from \"../../utils\";\n\nexport default (node, props) => {\n  console.log(node);\n\n  const propObject = {\n    quote: node.childNodes[0].textContent,\n    author: node.childNodes[1].textContent,\n    description: node.childNodes[2].innerHTML,\n    ...getAdvanced(node),\n  };\n\n  console.log(propObject);\n  return propObject;\n};\n`}</code></pre>\n    <p>{`Adding `}<inlineCode parentName=\"p\">{`console.log(node)`}</inlineCode>{` at the beginning of your aggregator function, and at he end (`}<inlineCode parentName=\"p\">{`console.log(propObject)`}</inlineCode>{`), helps to show you the HTML you receive and the object you return. The property object returned from our aggregator looks like this:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"866px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"41.25%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-pwa-studio/static/36a6ebbb475cfe1037b816f06bf9ebc2/5530d/AggregatorObjectConsoleOutput.webp 320w\", \"/commerce-pwa-studio/static/36a6ebbb475cfe1037b816f06bf9ebc2/0c8fb/AggregatorObjectConsoleOutput.webp 640w\", \"/commerce-pwa-studio/static/36a6ebbb475cfe1037b816f06bf9ebc2/addc7/AggregatorObjectConsoleOutput.webp 866w\"],\n            \"sizes\": \"(max-width: 866px) 100vw, 866px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-pwa-studio/static/36a6ebbb475cfe1037b816f06bf9ebc2/dd4a7/AggregatorObjectConsoleOutput.png 320w\", \"/commerce-pwa-studio/static/36a6ebbb475cfe1037b816f06bf9ebc2/0f09e/AggregatorObjectConsoleOutput.png 640w\", \"/commerce-pwa-studio/static/36a6ebbb475cfe1037b816f06bf9ebc2/4219d/AggregatorObjectConsoleOutput.png 866w\"],\n            \"sizes\": \"(max-width: 866px) 100vw, 866px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/commerce-pwa-studio/static/36a6ebbb475cfe1037b816f06bf9ebc2/4219d/AggregatorObjectConsoleOutput.png\",\n            \"alt\": \"Aggregator object console output\",\n            \"title\": \"Aggregator object console output\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <InlineAlert variant=\"help\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You will need to know the property `}<inlineCode parentName=\"p\">{`key-values`}</inlineCode>{` you are returning so that that you can assign them to corresponding properties in your component when you build it out.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}