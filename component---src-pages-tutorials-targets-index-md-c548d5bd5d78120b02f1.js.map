{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/tutorials/targets/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,2BADR,4BAGA,oFAAqE,cAAGC,WAAW,IAC/E,KAAQ,+DADyD,2BAArE,+JAIA,eACE,GAAM,kBADR,mBAGA,sMAEA,eACE,GAAM,oCADR,qCAGA,wHAAyG,uBAAYA,WAAW,KAAvB,gBAAzG,WACA,yFAA0E,uBAAYA,WAAW,KAAvB,gCAA1E,kDACyC,uBAAYA,WAAW,KAAvB,4BADzC,uCAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,+FAQL,eACE,GAAM,0BADR,2BAGA,iFACE,uBAAYA,WAAW,KAAvB,0BADF,6GAEA,uEAAwD,mBAAQA,WAAW,KAAnB,6BAAxD,yDACmC,uBAAYA,WAAW,KAAvB,gBADnC,SACoG,uBAAYA,WAAW,KAAvB,mBADpG,oBACmL,uBAAYA,WAAW,KAAvB,gBADnL,2LAGA,eACE,GAAM,sBADR,uBAGA,8OAEA,eACE,GAAM,UADR,WAGA,wBAAS,eAAIA,WAAW,KAAf,UAAT,2RAGA,eACE,GAAM,wBADR,yBAGA,gJACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,yUAaL,eACE,GAAM,+BADR,gCAGA,uGACA,oBACE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,+CADQ,eAGpB,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,gEADQ,eAGpB,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,2CADQ,eAItB,eACE,GAAM,eADR,gBAGA,mBAAG,eAAIA,WAAW,KAAf,eAAH,+NAEA,+DACA,oBACE,eAAIA,WAAW,MAAf,SAA6B,mBAAQA,WAAW,MAAnB,wBAA7B,kGACA,eAAIA,WAAW,MAAf,UAA8B,mBAAQA,WAAW,MAAnB,uBAA9B,qEAEF,eACE,GAAM,kCADR,mCAGA,mHAAoG,cAAGA,WAAW,IAC9G,KAAQ,iEADwF,iBAApG,sHAIA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,4UAYL,eACE,GAAM,6BADR,8BAGA,iEAAkD,cAAGA,WAAW,IAC5D,KAAQ,oEADsC,oBAAlD,kLAKA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,4fAmBL,wDAAyC,cAAGA,WAAW,IACnD,KAAQ,sEAD6B,sBAAzC,qIAIA,eACE,GAAM,yBADR,0BAGA,4EAA6D,cAAGA,WAAW,IACvE,KAAQ,4EADiD,4BAA7D,iJAIA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,2fAmBL,eACE,GAAM,8BADR,+BAGA,4LACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,+iBAqBTJ,EAAWK,gBAAiB","file":"component---src-pages-tutorials-targets-index-md-c548d5bd5d78120b02f1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"targets-and-targetables\"\n    }}>{`Targets and Targetables`}</h1>\n    <p>{`Targets and Targetables are features provided by PWA Studio's `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/guides/general-concepts/extensibility/\"\n      }}>{`extensibility framework`}</a>{`.\nThey give you the ability to change feature behaviors, component logic, and even component source code without editing a local copy of PWA Studio code.`}</p>\n    <h2 {...{\n      \"id\": \"intercept-file\"\n    }}>{`Intercept file`}</h2>\n    <p>{`The intercept file is where you directly interact with Targets and Targetables to apply customizations.\nIt exports a default function that accepts a TargetProvider parameter.`}</p>\n    <h3 {...{\n      \"id\": \"intercept-file-name-and-location\"\n    }}>{`Intercept file name and location`}</h3>\n    <p>{`The file name and location of your intercept file is a custom value you specify in your project's `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file.`}</p>\n    <p>{`To register the location of your intercept file, set the value for `}<inlineCode parentName=\"p\">{`pwa-studio.targets.intercept`}</inlineCode>{`.\nFor example, the following entry registers `}<inlineCode parentName=\"p\">{`src/targets/intercept.js`}</inlineCode>{` as this project's intercept file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"pwa-studio\": {\n    \"targets\": {\n      \"intercept\": \"src/targets/intercept\"\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"how-interception-works\"\n    }}>{`How interception works`}</h3>\n    <p>{`Interception logic executes during the build process.\nThe `}<inlineCode parentName=\"p\">{`@magento/pwa-buildpack`}</inlineCode>{` module creates a BuildBus process to run intercept files in the storefront project or its dependencies.`}</p>\n    <p>{`The BuildBus process executes intercept files in `}<strong parentName=\"p\">{`named direct dependencies`}</strong>{` in a project.\nThis means that modules listed under `}<inlineCode parentName=\"p\">{`dependencies`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`devDependencies`}</inlineCode>{` in a project's `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file have the ability to intercept Targets and Targetables in the project.\nThe process does not execute intercept files in dependencies beyond those modules in the dependency tree.`}</p>\n    <h3 {...{\n      \"id\": \"interception-order\"\n    }}>{`Interception order`}</h3>\n    <p>{`The interception process executes files in dependency order.\nThis means that if your module declares another module that has an intercept file as a peer dependency, the other module's intercept file executes first.`}</p>\n    <h2 {...{\n      \"id\": \"target\"\n    }}>{`Target`}</h2>\n    <p>{`A `}<em parentName=\"p\">{`Target`}</em>{` is a formal extension point exposed by a package.\nBuildpack, Peregrine, and Venia UI expose their own set of Targets that let developers change the behavior of the underlying code.\nTargets are a package's public API and can be intercepted in storefront or extension projects.`}</p>\n    <h3 {...{\n      \"id\": \"intercepting-targets\"\n    }}>{`Intercepting Targets`}</h3>\n    <p>{`Use the TargetProvider given to the intercept file's default function to access Targets from your project's dependencies.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`module.exports = (targets) => {\n  // Set buildpack features\n  const builtins = targets.of(\"@magento/pwa-buildpack\");\n  builtins.specialFeatures.tap((featuresByModule) => {\n    featuresByModule[\"my-extension\"] = {\n      // Tells buildpack that this extension uses ES Modules\n      esModules: true,\n    };\n  });\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"pwa-studio-target-reference\"\n    }}>{`PWA Studio target reference`}</h3>\n    <p>{`The following PWA Studio packages contain Targets that developers can intercept:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/commerce-pwa-studio/api/buildpack/targets/\"\n        }}>{`Buildpack`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/commerce-pwa-studio/api/peregrine/extension-points/targets/\"\n        }}>{`Peregrine`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/commerce-pwa-studio/api/venia/targets/\"\n        }}>{`Venia UI`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"targetables\"\n    }}>{`Targetables`}</h2>\n    <p><em parentName=\"p\">{`Targetables`}</em>{` are objects that give you access to the source code for the files in your project or library.\nThey let you change the final application bundles by applying transformations to the source code during the build process.`}</p>\n    <p>{`Targetables are useful in two scenarios:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`As a `}<strong parentName=\"li\">{`storefront developer`}</strong>{`, you can use Targetables to transform the source file in any of your project's dependencies.`}</li>\n      <li parentName=\"ul\">{`As an `}<strong parentName=\"li\">{`extension developer`}</strong>{`, you can use Targetables to add Targets to your own extension.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"access-the-targetableset-class\"\n    }}>{`Access the TargetableSet class`}</h3>\n    <p>{`The most common pattern for working with Targetable objects is to connect an instance of the `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/api/buildpack/targetables/TargetableSet/\"\n      }}>{`TargetableSet`}</a>{` to the TargetProvider sent to the intercept file.\nThen, you can use that instance to create Targetable objects.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Access the TargetableSet class\nconst { Targetables } = require(\"@magento/pwa-buildpack\");\n\nmodule.exports = (targets) => {\n  // Create a TargetableSet instance connected to this project's TargetProvider\n  const targetables = Targetables.using(targets);\n\n  // Use the TargetableSet to create Targetable objects\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-targetable-objects\"\n    }}>{`Create Targetable objects`}</h3>\n    <p>{`Use the TargetableSet instance to create a `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/api/buildpack/targetables/TargetableModule/\"\n      }}>{`TargetableModule`}</a>{` class object or one of its subclasses.\nThe TargetableModule class itself represents a plain module.\nIt contains functions that let it manipulate the source code directly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { Targetables } = require(\"@magento/pwa-buildpack\");\n\nmodule.exports = (targets) => {\n  const targetables = Targetables.using(targets);\n\n  // Create a TargetableModule instance that points to the main.js source\n  const MainComponent = targetables.module(\n    \"@magento/venia-ui/lib/components/Main/main.js\"\n  );\n\n  // Insert a console log message in the source\n  MainComponent.insertAfterSource(\n    \"const Main = props => {\\\\n\",\n    '\\\\tconsole.log(\"Hello World\");\\\\n'\n  );\n};\n`}</code></pre>\n    <p>{`Other Targetable classes, such as `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/api/buildpack/targetables/TargetableESModule/\"\n      }}>{`TargetableESModule`}</a>{`, are subclasses of TargetableModule.\nThey contain specialized functions that let it work with different modules or file types.`}</p>\n    <h3 {...{\n      \"id\": \"chain-transformations\"\n    }}>{`Chain transformations`}</h3>\n    <p>{`Some Targetable classes, such as TargetableModule and `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/api/buildpack/targetables/TargetableReactComponent/\"\n      }}>{`TargetableReactComponent`}</a>{`, support method chaining.\nCertain methods in these classes are chainable, which let you call these methods one after another in your code.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { Targetables } = require(\"@magento/pwa-buildpack\");\n\nmodule.exports = (targets) => {\n  const targetables = Targetables.using(targets);\n\n  const MainComponent = targetables.reactComponent(\n    \"@magento/venia-ui/lib/components/Main/main.js\"\n  );\n\n  MainComponent.appendJSX(\n    \"div className={pageClass}\",\n    \"<span>appendJSX succeeded!</span>\"\n  )\n    .addJSXClassName(\"Header\", '\"myClass\"')\n    .insertBeforeJSX(\"<Header />\", \"<span>insertBeforeJSX succeeded!</span>\");\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"unbound-targetable-objects\"\n    }}>{`Unbound Targetable objects`}</h3>\n    <p>{`A less common pattern for using Targetables is to access the Targetables classes directly and creating an object that is not connected to a project's TargetProvider.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { Targetables } = require(\"@magento/pwa-buildpack\");\n\nmodule.exports = (targets) => {\n  // Create an unbound Targetable ESModule object from a file\n  const handlers = new Targetables.ESModule(\"src/lib/handlers.js\");\n\n  // Wrap an export in a decorator from another file\n  handlers.wrapWithFile(\"handleLoad\", \"src/overrides/doSomethingOnLoad.js\");\n\n  // Send it all to the build\n  targets.of(\"@magento/pwa-buildpack\").transformModules.tap((addTransform) => {\n    handlers.flush().forEach((request) => addTransform(request));\n  });\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}