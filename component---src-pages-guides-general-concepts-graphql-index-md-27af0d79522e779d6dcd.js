(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[4043],{20688:function(e,n,a){"use strict";a.r(n),a.d(n,{_frontmatter:function(){return o},default:function(){return h}});var t,r=a(22122),i=a(19756),l=(a(15007),a(64983)),d=a(99536),s=["components"],o={},m=(t="InlineAlert",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),p={_frontmatter:o},u=d.Z;function h(e){var n=e.components,a=(0,i.Z)(e,s);return(0,l.mdx)(u,(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"graphql"},"GraphQL"),(0,l.mdx)("p",null,(0,l.mdx)("a",{parentName:"p",href:"https://graphql.org/"},"GraphQL")," is a language for querying and manipulating data.\nIt is widely viewed as more powerful, flexible, and efficient than REST."),(0,l.mdx)("h2",{id:"benefits-provided-by-graphql"},"Benefits provided by GraphQL"),(0,l.mdx)("p",null,"Using GraphQL provides the following benefits:"),(0,l.mdx)("h3",{id:"predictable-results-from-your-queries"},"Predictable results from your queries"),(0,l.mdx)("p",null,"A GraphQL query returns only data the user asks for in their query."),(0,l.mdx)("h3",{id:"single-request-for-many-results"},"Single request for many results"),(0,l.mdx)("p",null,"A single request made through GraphQL can return any number of resources and their fields by following references between them as defined in the typed schema."),(0,l.mdx)("h3",{id:"organized-data-with-a-typed-schema"},"Organized data with a typed schema"),(0,l.mdx)("p",null,"A single schema defines how users access data using GraphQL.\nThese schemas, formatted as JSON objects, let users know exactly how to get the data they need."),(0,l.mdx)("p",null,"The following is an example of a schema that defines a ",(0,l.mdx)("inlineCode",{parentName:"p"},"Species")," type with ",(0,l.mdx)("inlineCode",{parentName:"p"},"name")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"origin")," fields:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Species {\n  name: String\n  origin: Planet\n}\ntype Planet {\n  name: String\n}\n")),(0,l.mdx)(m,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Note:")," The ",(0,l.mdx)("inlineCode",{parentName:"p"},"origin")," field is a ",(0,l.mdx)("inlineCode",{parentName:"p"},"Planet")," type, which also has a ",(0,l.mdx)("inlineCode",{parentName:"p"},"name")," field."),(0,l.mdx)("h2",{id:"why-use-graphql-over-rest"},"Why use GraphQL over REST"),(0,l.mdx)("p",null,"While GraphQL and REST are both specifications for constructing and querying APIs, GraphQL has some significant advantages over REST."),(0,l.mdx)("h3",{id:"no-versioning"},"No versioning"),(0,l.mdx)("p",null,"REST APIs typically have multiple versions, such as v1, v2, etc.\nThis is because updating endpoints in REST will often impact existing queries."),(0,l.mdx)("p",null,"With GraphQL, there is no need for versioning, since new types and fields can be added to the schema without impacting existing queries."),(0,l.mdx)("p",null,"Removing fields is done through deprecation instead of deleting them from the schema.\nIf an old query tries to read a deprecated field, GraphQL displays a customized warning."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre"},'type ExampleType {\n  firstName: String\n  lastName: String\n  name: String @deprecated(reason: "Split this field into two. Use `firstName` and `lastName`")\n}\n')),(0,l.mdx)("p",null,"This prevents old queries from throwing confusing errors when trying to read outdated fields, lending to code maintainability."),(0,l.mdx)("h3",{id:"faster-and-more-efficient"},"Faster and more efficient"),(0,l.mdx)("p",null,"REST APIs typically require loading from multiple URLs.\nImagine a REST API designed to get users and their forum posts.\n",(0,l.mdx)("inlineCode",{parentName:"p"},"users/<id>")," would return information like ",(0,l.mdx)("inlineCode",{parentName:"p"},"name")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"user/<id>/posts")," would have to be queried separately to return the user's ",(0,l.mdx)("inlineCode",{parentName:"p"},"comments"),"."),(0,l.mdx)("p",null,"With GraphQL, these ",(0,l.mdx)("inlineCode",{parentName:"p"},"types")," and their ",(0,l.mdx)("inlineCode",{parentName:"p"},"fields")," are returned using one query, which saves calls to the API."),(0,l.mdx)("p",null,"In the following schema example, a ",(0,l.mdx)("inlineCode",{parentName:"p"},"User")," type contains a ",(0,l.mdx)("inlineCode",{parentName:"p"},"posts")," field, which is an array of ",(0,l.mdx)("inlineCode",{parentName:"p"},"Post")," types:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  user(id: Int): User\n  # This is our resolver; our entry into the query\n  # It lets us query `user` with an argument `id`\n  # And Expects to return a type `User`\n  # Yes, you can leave comments in schemas!\n}\n\ntype User {\n  id: Int!\n  name: String\n  posts: [Post]\n}\n\ntype Post {\n  id: Int!\n  title: String\n  author: User\n}\n")),(0,l.mdx)(m,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Note:")," The exclamation mark (!) next to a field in the schema indicates it is ",(0,l.mdx)("inlineCode",{parentName:"p"},"non-nullable"),", which means the GraphQL service promises to always return a value for this field on a query."),(0,l.mdx)("p",null,"A query for this schema that requests the name and all the post titles for a specific user would look like the following:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"{\n  user(id: 12345) {\n    name\n    posts {\n      title\n    }\n  }\n}\n")),(0,l.mdx)("p",null,"The data response for the query would look like the following:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre"},'{\n  "data": {\n    "user": {\n      "name":  "Jane Doe"\n      "posts": [\n         {\n           title: "Hello World"\n         },\n         {\n           title: "I Love GraphQL"\n         }\n      ]\n    }\n  }\n}\n')),(0,l.mdx)("h2",{id:"sample-queries"},"Sample queries"),(0,l.mdx)("h3",{id:"simple-query"},"Simple query"),(0,l.mdx)("p",null,"Imagine a database that simply contains an object ",(0,l.mdx)("inlineCode",{parentName:"p"},"User"),", with the fields ",(0,l.mdx)("inlineCode",{parentName:"p"},"name"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"email"),", and ",(0,l.mdx)("inlineCode",{parentName:"p"},"phone"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  user: User\n}\n\ntype User {\n  name: String\n  email: String\n  phone: String\n}\n")),(0,l.mdx)("p",null,"A simple query requesting this data would look like the following:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"{\n  user {\n    name\n    email\n    phone\n  }\n}\n")),(0,l.mdx)("p",null,"The response to this query would look like the following:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre"},'{\n  "data": {\n    "user": {\n      "name":  "Jane Doe"\n      "email": "JaneDoe@example.com"\n      "phone": "012-345-6789"\n    }\n  }\n}\n')),(0,l.mdx)("h3",{id:"custom-data-query"},"Custom data query"),(0,l.mdx)("p",null,"What if you don't need the ",(0,l.mdx)("inlineCode",{parentName:"p"},"phone")," number from ",(0,l.mdx)("inlineCode",{parentName:"p"},"User"),"?\nThe previous query can be rewritten to return specific fields:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"{\n  user {\n    name\n    email\n  }\n}\n")),(0,l.mdx)("p",null,"The response only provides the data requested:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre"},'{\n  "data": {\n    "user": {\n      "name":  "Jane Doe"\n      "email": "JaneDoe@example.com"\n    }\n  }\n}\n')),(0,l.mdx)("h3",{id:"arguments-in-a-query"},"Arguments in a query"),(0,l.mdx)("p",null,"Now, what if you had multiple users and needed to grab a specific one using its ",(0,l.mdx)("inlineCode",{parentName:"p"},"id"),"?\nWell, with GraphQL you can pass arguments into the query:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre"},"{\n user(id: 12345) {\n   id\n   name\n   email\n }\n}\n")),(0,l.mdx)("p",null,"The response would look like the following:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre"},'{\n  "data": {\n    "user": {\n      "id": "12345"\n      "name": "Jane Doe"\n      "email": "JaneDoe@example.com"\n    }\n  }\n}\n')),(0,l.mdx)(m,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Note:")," The ",(0,l.mdx)("inlineCode",{parentName:"p"},"id")," field is requested in the response in this example, but this is optional.\nIt is used here to demonstrate that the correct user is returned."),(0,l.mdx)("h3",{id:"query-connected-resources"},"Query connected resources"),(0,l.mdx)("p",null,"In this example, imagine that in our database a ",(0,l.mdx)("inlineCode",{parentName:"p"},"User")," is associated with multiple hobbies.\nThe schema would look like the following:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-graphql"},"type Query {\n  user: User\n}\n\ntype User {\n  name: String\n  email: String\n  phone: String\n  hobbies: [Hobby]\n}\n\ntype Hobby {\n  name: String\n  frequency: String\n}\n")),(0,l.mdx)("p",null,"The following query requests the hobbies associated with a specific user:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre"},"{\n user(id: 12345) {\n   name\n   email\n   phone\n   hobbies {\n     name\n     frequency\n   }\n }\n}\n")),(0,l.mdx)("p",null,"The response would look like the following:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre"},'{\n  "data": {\n    "user": {\n      "name":  "Jane Doe"\n      "email": "JaneDoe@example.com"\n      "phone": "012-345-6789"\n      "hobbies": [\n        {\n          "name": "painting",\n          "frequency": "weekly"\n        },\n        {\n          "name": "video games",\n          "frequency": "daily"\n        }\n      ]\n    }\n  }\n}\n')),(0,l.mdx)("p",null,"Notice how the user's ",(0,l.mdx)("inlineCode",{parentName:"p"},"hobbies")," are returned in an ",(0,l.mdx)("inlineCode",{parentName:"p"},"array")," as defined in the schema."),(0,l.mdx)("h2",{id:"learn-more"},"Learn more"),(0,l.mdx)("p",null,"This topic just covers the basics of GraphQL.\nTo learn more, visit the ",(0,l.mdx)("a",{parentName:"p",href:"https://graphql.org/"},"GraphQL")," website."))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-general-concepts-graphql-index-md-27af0d79522e779d6dcd.js.map