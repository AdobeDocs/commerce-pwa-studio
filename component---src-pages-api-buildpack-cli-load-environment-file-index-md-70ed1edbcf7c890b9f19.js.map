{"version":3,"file":"component---src-pages-api-buildpack-cli-load-environment-file-index-md-70ed1edbcf7c890b9f19.js","mappings":"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","sources":["webpack://commerce-pwa-studio/./src/pages/api/buildpack/cli/load-environment-file/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"load-environment-file\"\n    }}>{`Load environment file`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`load-env`}</inlineCode>{` subcommand for the `}<a parentName=\"p\" {...{\n        \"href\": \"/api/buildpack/cli/\"\n      }}><inlineCode parentName=\"a\">{`buildpack`}</inlineCode></a>{` CLI command loads and validates the local `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file according to the variable declarations in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/pwa-studio/blob/develop/packages/pwa-buildpack/envVarDefinitions.json\"\n      }}><inlineCode parentName=\"a\">{`envVarDefinitions.json`}</inlineCode></a>{` file.\nThis includes any deprecated or changed settings.\nWhen loading from `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`buildpack`}</inlineCode>{` does not override previously declared variables.`}</p>\n    <h2 {...{\n      \"id\": \"command-flags\"\n    }}>{`Command flags`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--core-dev-mode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Used only by the core PWA Studio repository for quick setups of the core dev environment.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`The `}<inlineCode parentName=\"p\">{`--core-dev-mode`}</inlineCode>{` flag tells `}<inlineCode parentName=\"p\">{`buildpack`}</inlineCode>{` to run `}<inlineCode parentName=\"p\">{`buildpack create-env-file --use-examples`}</inlineCode>{` if an existing `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file does not exist in the given directory path.`}</p>\n    <h2 {...{\n      \"id\": \"usage-tips\"\n    }}>{`Usage tips`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use the `}<inlineCode parentName=\"p\">{`load-env`}</inlineCode>{` command in NPM scripts instead of directly invoking it with `}<inlineCode parentName=\"p\">{`npx`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use a command, shell script, or spawned subprocess to override individual environment variables at start time.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`The command does not require a `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file to be present.`}</p>\n        <p parentName=\"li\">{`If a `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file is not present, the environment is still valid if another process or command sets the required variables.\nIf the file is not present and the variable `}<inlineCode parentName=\"p\">{`NODE_ENV`}</inlineCode>{` is not set to `}<inlineCode parentName=\"p\">{`production`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`buildpack`}</inlineCode>{` logs a warning.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"programmatic-api\"\n    }}>{`Programmatic API`}</h2>\n    <p>{`Adding the `}<inlineCode parentName=\"p\">{`@magento/pwa-buildpack`}</inlineCode>{` dependency to your project gives you access to the programmatic API for loading the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file.`}</p>\n    <h3 {...{\n      \"id\": \"loadenvironmentdirorenv-logger\"\n    }}><inlineCode parentName=\"h3\">{`loadEnvironment(dirOrEnv, [logger])`}</inlineCode></h3>\n    <p>{`Loads a given directory's `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file and provides a `}<a parentName=\"p\" {...{\n        \"href\": \"/guides/general-concepts/configuration/\"\n      }}>{`configuration object`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { loadEnvironment } = require(\"@magento/pwa-buildpack\");\n\nconst configuration = await loadEnvironment(process.cwd());\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Data type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`dirOrEnv`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` path or `}<inlineCode parentName=\"td\">{`process.env`}</inlineCode>{` object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Provides a path to the project root.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`logger`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`object`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`An optional logger object to use instead of the default console.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`If the `}<inlineCode parentName=\"p\">{`dirOrEnv`}</inlineCode>{` parameter is a `}<inlineCode parentName=\"p\">{`process.env`}</inlineCode>{` object, it will not attempt to parse a `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file.`}</p>\n    <h4 {...{\n      \"id\": \"return-value\"\n    }}>{`Return value`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`loadEnvironment()`}</inlineCode>{` function returns a configuration object.`}</p>\n    <h3 {...{\n      \"id\": \"configuration-object\"\n    }}>{`Configuration object`}</h3>\n    <p>{`Use the configuration object returned by `}<inlineCode parentName=\"p\">{`loadEnvironment()`}</inlineCode>{` as a single source of truth for configuration.`}</p>\n    <h4 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`Alias`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`env`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The raw environment object`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isProduction`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}><inlineCode parentName=\"td\">{`isProd`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`True if `}<inlineCode parentName=\"td\">{`NODE_ENV=production`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isDevelopment`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}><inlineCode parentName=\"td\">{`isDev`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`True if `}<inlineCode parentName=\"td\">{`NODE_ENV=development`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isTest`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`-`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`True if `}<inlineCode parentName=\"td\">{`NODE_ENV=test`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h4>\n    <p>{`The configuration object provides methods that return settings in specific namespaces.\nThis lets you pass smaller objects instead of a single, plain object full of global configuration values.`}</p>\n    <p><inlineCode parentName=\"p\">{`section(sectionName)`}</inlineCode>{`\n: Returns a plain object with environment variables in the `}<inlineCode parentName=\"p\">{`sectionName`}</inlineCode>{` namespace.\nThe property keys are `}<a parentName=\"p\" {...{\n        \"href\": \"https://npmjs.com/package/camelspace\"\n      }}>{`camelCased`}</a>{` for convenience.`}</p>\n    <p><inlineCode parentName=\"p\">{`sections(...sectionNames)`}</inlineCode>{`\n: Returns a plain object with environment variables from the specified namespaces.\nThe namespaces are assigned to different camelCased properties named after the section name.`}</p>\n    <p><inlineCode parentName=\"p\">{`all()`}</inlineCode>{`\n: Returns the entire environment object, camelCased for convenience, with no namespace separations.`}</p>\n    <h3 {...{\n      \"id\": \"full-example-script\"\n    }}>{`Full example script`}</h3>\n    <p>{`The following example is a script that starts an `}<a parentName=\"p\" {...{\n        \"href\": \"/guides/packages/upward/javascript/\"\n      }}>{`UPWARD-JS`}</a>{` server using configuration values loaded from the environment and `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file in the project path.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { loadEnvironment } from \"@magento/pwa-buildpack\";\n\n// Give \\`loadEnvironment\\` the path to the project root.\n// If the current file is in project root, use the Node builtin \\`__dirname\\`.\nconst configuration = await loadEnvironment(\"/Users/me/path/to/project\");\n\n// \\`loadEnvironment\\` has now read the contents of\n// \\`/Users/me/path/to/project/.env\\` and merged it with any environment\n// variables that were alredy set.\n\n// Create an UPWARD server using env vars that begin with \\`UPWARD_JS_\\`\ncreateUpwardServer(configuration.section(\"upwardJs\"));\n\n// If these environment variables are set:\n//\n// UPWARD_JS_HOST=https://local.upward/\n// UPWARD_JS_PORT=8081\n//\n// then \\`configuration.section('upwardJs')\\` produces this object:\n//\n// {\n//   host: 'https://local.upward',\n//   port: '8081'\n// }\n//\n// No other environment variables are included in this object unless they begin\n// with \\`UPWARD_JS_\\` which is the equivalent of \\`upwardJs\\` camel-cased.\n\n// The .all() method turns the whole environment into an object, with all\n// CONSTANT_CASE names turned into camelCase names.\nconst allConfig = configuration.all();\n\n// This object will have one property for each set environment variable,\n// including the UPWARD variables named above.\n// But \\`configuration.all()\\` does not namespace them, they have longer names:\n//\n// {\n//   upwardJsHost: 'https://local.upward',\n//   upwardJsPort: '8081'\n// }\n//\n// This huge object defeats the purpose of loadEnvironment() and should\n// only be used for debugging.\n\n// Instead, let's create an UPWARD server combining two environment variable\n// sections with hardcoded overrides to some values.\ncreateUpwardServer({\n  ...configuration.section(\"upwardJs\"),\n  ...configuration.section(\"magento\"),\n  bindLocal: true,\n});\n\n// This uses JavaScript object spreading to combine several sections of\n// configuration and override a value.\n// If the environment contains these values:\n//\n// UPWARD_JS_HOST=https://local.pwadev\n// UPWARD_JS_PORT=443\n// UPWARD_JS_BIND_LOCAL=\n// MAGENTO_BACKEND_URL=https://local.magento\n//\n// Then the above code passes the following object to \\`createUpwardServer\\`:\n//\n// {\n//   host: 'https://local.pwadev',\n//   port: '443',\n//   backendUrl: 'https://local.magento',\n//   bindLocal: true\n// }\n\n// The \\`sections()\\` method can split an env object into named subsections:\ncreateUpwardServer(configuration.sections(\"upwardJs\", \"magento\"));\n\n// Given the same environment variables as above, this code will pass the\n// following to \\`createUpwardServer\\`:\n//\n// {\n//   upwardJs: {\n//     host: 'https://local.pwadev',\n//     port: '443',\n//     bindLocal: '' // the null string is used as a falsy value\n//   },\n//   magento: {\n//     backendUrl: 'https://local.magento'\n//   }\n// }\n//\n// (The above is not the actual config object format for \\`createUpwardServer\\`,\n// but if it was, that's how you'd make it.)\n\n// Use the convenience properties \\`isProd\\` and \\`isDev\\` instead of testing\n// \\`process.env.NODE_ENV\\` directly:\nif (configuration.isDev) {\n  console.log(\"Development mode\");\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}