{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/api/buildpack/targets/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"6SASaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,yBACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,WADR,YAGA,gNAEA,eACE,GAAM,YADR,aAGA,uJAEU,eAAIC,WAAW,KAAf,SAFV,yGAEoJ,eAAIA,WAAW,KAAf,OAFpJ,cAGA,kNAEA,iGAAkF,cAAGA,WAAW,IAC5F,KAAQ,0CADsE,2BAAlF,wCAG+B,uBAAYA,WAAW,KAAvB,mBAH/B,iUAYA,SAAC,IAAD,CAAMD,QAAQ,UAKlBH,EAAWK,gBAAiB","file":"component---src-pages-api-buildpack-targets-index-md-c9449e629732065debb4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/data/auto-generated/pwa-buildpack/lib/BuildBus/declare-base.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"targets\"\n    }}>{`Targets`}</h1>\n    <p>{`Buildpack's targets follow the same Target API as other packages' targets, but they play a unique role.\nBuildpack targets are the fundamental \"roots\" of the PWA Studio Target system.`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`All other Targets operate by intercepting other Targets.\nBuildBus runs the declare and intercept phases by itself.\nBut nothing `}<em parentName=\"p\">{`calls`}</em>{` targets to run any interceptors until Buildpack begins the process, by directly invoking one of its `}<em parentName=\"p\">{`own`}</em>{` targets.`}</p>\n    <p>{`The Buildpack targets are therefore very generic and low-level.\nThey are meant to be used as building blocks for higher-level feature targets, such as adding routing or navigation logic.`}</p>\n    <p>{`Even deeper than Buildpack targets are the very similar Hooks that make up `}<a parentName=\"p\" {...{\n        \"href\": \"https://v4.webpack.js.org/api/plugins/\"\n      }}>{`Webpack's plugin system`}</a>{`.\nInterceptors can use Buildpack's `}<inlineCode parentName=\"p\">{`webpackCompiler`}</inlineCode>{` target to acquire a reference to the Webpack Compiler object for each build, and can then do anything a Webpack plugin can do.\nBecause of their similarity in form and function, the PWA Studio Targets system integrates seamlessly into the larger Webpack ecosystem as a commerce-driven superset of its functionality.`}</p>\n    {\n      /*\n      The reference doc content is generated automatically from the source code.\n      To update this section, update the doc blocks in the source code\n      */\n    }\n\n    <Docs mdxType=\"Docs\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}