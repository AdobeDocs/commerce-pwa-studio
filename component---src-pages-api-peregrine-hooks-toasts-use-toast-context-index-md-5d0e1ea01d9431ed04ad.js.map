{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/api/peregrine/hooks/toasts/useToastContext/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"8SASaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,yBACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,mBADR,sBAUA,SAAC,IAAD,CAAWA,QAAQ,eACnB,eACE,GAAM,YADR,aAGA,eACE,GAAM,iCADR,kCAGA,2HACA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,gBADZ,yaAqBL,2BAAY,mBAAQA,WAAW,KAAnB,qBAAZ,0EACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,2gBA4BTJ,EAAWK,gBAAiB","file":"component---src-pages-api-peregrine-hooks-toasts-use-toast-context-index-md-5d0e1ea01d9431ed04ad.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Component from '/src/data/auto-generated/peregrine/lib/Toasts/useToastContext.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"usetoastcontext\"\n    }}>{`useToastContext()`}</h1>\n    {\n      /*\n      The reference doc content is generated automatically from the source code.\n      To update this section, update the doc blocks in the source code\n      */\n    }\n\n    <Component mdxType=\"Component\" />\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"using-the-toast-context-logic\"\n    }}>{`Using the Toast context logic`}</h3>\n    <p>{`Import the ToastContextProvider and wrap it around components that use Toast data and functionality.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// MyComponent.js\n\nimport {ToastContextProvider} from '@magento/peregrine'\nimport {ToastContainer, AddToastComponent} from './MyToastComponents'\n\n...\n\nconst MyComponent = () =>{\n\n  return (\n  <ToastContextProvider>\n    <ToastContainer /> // A component which would display based on state.\n    <AddToastComponent /> // A component which adds a toast using actions.\n  </ToastContextProvider>\n  )\n}\n\n...\n`}</code></pre>\n    <p>{`Call `}<strong parentName=\"p\">{`useToastContext()`}</strong>{` to get the current state of the toast store and a dispatch function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// MyToastComponents.js\n\nimport { useToastContext } from \"@magnto/peregrine\";\n\nexport const ToastContainer = () => {\n  const [toastState, toastDispatch] = useToastContext();\n\n  const toastData = toastState.map((toast) => {\n    // Do something with the toast data\n  });\n\n  return <div>{toastData}</div>;\n};\n\nexport const AddToastComponent = () => {\n  return;\n  <div>\n    // Some component that allows you to add toast data using the //\n    toastDispatch() function or useToast() hook\n  </div>;\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}