{"version":3,"file":"component---src-pages-integrations-pagebuilder-index-md-1e72cb1d99fadd6ae759.js","mappings":"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","sources":["webpack://commerce-pwa-studio/./src/pages/integrations/pagebuilder/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"page-builder\"\n    }}>{`Page Builder`}</h1>\n    <p>{`At the highest level, the Page Builder integration into PWA Studio simply ensures that CMS Pages built in the backend with `}<em parentName=\"p\">{`native`}</em>{` Page Builder content types are rendered correctly within PWA Studio apps.`}</p>\n    <h2 {...{\n      \"id\": \"integration-overview\"\n    }}>{`Integration overview`}</h2>\n    <div style={{\n      \"position\": \"relative\",\n      \"overflow\": \"hidden\",\n      \"paddingTop\": \"56.25%\",\n      \"border\": \"1px solid #ccc\"\n    }}>\n   <iframe style={{\n        \"position\": \"absolute\",\n        \"top\": \"0\",\n        \"left\": \"0\",\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"border\": \"0\"\n      }} title=\"Adobe Video Publishing Cloud Player\" src=\"https://video.tv.adobe.com/v/31598t1/?enable10seconds=on&hidetitle=true&quality=9&speedcontrol=on\" frameBorder=\"2\" webkitallowfullscreen mozallowfullscreen allowFullScreen scrolling=\"no\"></iframe>\n    </div>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The Page Builder integration to PWA Studio is only compatible with Adobe Commerce and Magento Open Source versions 2.3.4+. A GraphQL change within both applications was necessary to integrate the Page Builder Products content type into PWA Studio.`}</p>\n    <p>{`The diagram below shows how the PWA Studio makes a request to the backend application to retrieve a CMS page for processing. The Page Builder integration framework processes the original Page Builder HTML and returns a group of React components that faithfully reproduces the Page Builder content for display in a PWA Studio app.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-pwa-studio/assets/a3d2d466a4ac97ded11cc948e0c04552/PageBuilderBigPicture1.svg\",\n        \"alt\": \"Page Builder Integration Big Picture\"\n      }}></img></p>\n    <ol>\n      <li parentName=\"ol\">{`The Page Builder integration framework processes Page Builder content types within a CMS Page: Rows, Headings, Banners, Sliders, and so on.`}</li>\n      <li parentName=\"ol\">{`A set of equivalent content type React components -- Row, Heading, Banner, Slider, Text and so on -- are populated with the content and style properties from the original Page Builder content types so they can be displayed correctly within PWA Studio app storefronts.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"custom-content-types\"\n    }}>{`Custom content types`}</h2>\n    <p>{`If you only used Page Builder's 15 native content types (Dynamic Blocks are not supported), your Page Builder pages are automatically rendered within a PWA Studio app. No development work is necessary.`}</p>\n    <p>{`However, if you use one or more of your own custom Page Builder content types within your CMS pages (for example, a `}<a parentName=\"p\" {...{\n        \"href\": \"https://devdocs.magento.com/page-builder/docs/create-custom-content-type/overview.html\"\n      }}>{`Quote-Testimonial content type`}</a>{`), you will need to create your own equivalent Page Builder React component and integrate it within the framework. Otherwise, your custom content type will not appear on the storefront within a PWA Studio app. That area of your page will simply be blank.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`To develop and integrate your own custom content type components into your PWA Studio app, follow our `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/integrations/pagebuilder/custom-components/\"\n      }}>{`Creating custom components`}</a>{` tutorial.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-pwa-studio/assets/2f4b74d195d92f69aa8e240c049d8e98/PageBuilderIntegration.svg\",\n        \"alt\": \"Page Builder Integration Overview\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"framework-components\"\n    }}>{`Framework components`}</h2>\n    <p>{`As part of the Page Builder integration to PWA Studio, we implemented a framework that converts Page Builder’s master format (HTML) into a structured format that works in React and PWA Studio. The following video describes the components of this framework, followed by detailed descriptions of each.`}</p>\n    <div style={{\n      \"position\": \"relative\",\n      \"overflow\": \"hidden\",\n      \"paddingTop\": \"56.25%\",\n      \"border\": \"1px solid #ccc\"\n    }}>\n   <iframe style={{\n        \"position\": \"absolute\",\n        \"top\": \"0\",\n        \"left\": \"0\",\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"border\": \"0\"\n      }} title=\"Adobe Video Publishing Cloud Player\" src=\"https://video.tv.adobe.com/v/31597t1/?enable10seconds=on&hidetitle=true&quality=9&speedcontrol=on\" frameBorder=\"2\" webkitallowfullscreen mozallowfullscreen allowFullScreen scrolling=\"no\"></iframe>\n    </div>\n    <hr></hr>\n    <p>{`The Page Builder integration framework processes content as outlined here:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The framework receives Page Builder content types in the original HTML format (`}<strong parentName=\"li\">{`RichContent`}</strong>{` and `}<strong parentName=\"li\">{`PageBuilder`}</strong>{` components)`}</li>\n      <li parentName=\"ol\">{`The framework extracts the content and properties from each content type's HTML (`}<strong parentName=\"li\">{`Master Format parser`}</strong>{`, `}<strong parentName=\"li\">{`config function`}</strong>{`, and `}<strong parentName=\"li\">{`property aggregators`}</strong>{`)`}</li>\n      <li parentName=\"ol\">{`It retrieves the equivalent content type React components for those content types (`}<strong parentName=\"li\">{`ContentTypeFactory`}</strong>{`, `}<strong parentName=\"li\">{`config function`}</strong>{`, and `}<strong parentName=\"li\">{`content type components`}</strong>{`)`}</li>\n      <li parentName=\"ol\">{`It populates those React components with the content and style properties from the original content types (`}<strong parentName=\"li\">{`ContentTypeFactory and content type components`}</strong>{`)`}</li>\n      <li parentName=\"ol\">{`And finally, it returns those components for display in a PWA Studio app (`}<strong parentName=\"li\">{`PageBuilder`}</strong>{` and `}<strong parentName=\"li\">{`RichContent`}</strong>{` components)`}</li>\n    </ol>\n    <p>{`A description of each component in the framework follows.`}</p>\n    <h3 {...{\n      \"id\": \"richcontent\"\n    }}>{`RichContent`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<RichContent />`}</inlineCode>{` component provides the entry point into the Page Builder PWA framework. It determines whether the HTML passed by the PWA Studio app contains Page Builder content. If it does, the HTML is sent to the `}<inlineCode parentName=\"p\">{`<PageBuilder />`}</inlineCode>{` component for processing. If not, the HTML is sent directly to the PWA Studio app for display.`}</p>\n    <h3 {...{\n      \"id\": \"pagebuilder\"\n    }}>{`PageBuilder`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<PageBuilder />`}</inlineCode>{` component (not to be confused with the individual Page Builder React components) directs the parsing of the master format HTML as well as retrieving, populating, and returning the equivalent React components back to the Venia app.`}</p>\n    <h3 {...{\n      \"id\": \"master-format-parser\"\n    }}>{`Master Format parser`}</h3>\n    <p>{`The master format parser (`}<inlineCode parentName=\"p\">{`parseStorageHtml()`}</inlineCode>{`) decomposes the master format HTML into the content type HTML fragments (HTMLElements) that compose the master format. The parser sends the content type HTML to the correct property aggregator (`}<inlineCode parentName=\"p\">{`configAggregator`}</inlineCode>{`) using the configuration object.`}</p>\n    <h3 {...{\n      \"id\": \"config-function\"\n    }}>{`Config function`}</h3>\n    <p><em parentName=\"p\">{`Integration point`}</em>{`. The configuration function (`}<inlineCode parentName=\"p\">{`getContentTypeConfig()`}</inlineCode>{`) provides an interface for retrieving a content type's `}<em parentName=\"p\">{`property aggregator`}</em>{` and its corresponding `}<em parentName=\"p\">{`content type component`}</em>{`. The configuration object also provides the integration point for your own custom content type components. See `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/integrations/pagebuilder/custom-components/setup/\"\n      }}>{`Set up component`}</a>{` for details.`}</p>\n    <h3 {...{\n      \"id\": \"property-aggregator\"\n    }}>{`Property aggregator`}</h3>\n    <p><em parentName=\"p\">{`Integration point`}</em>{`. The property aggregator for a content type (example: `}<inlineCode parentName=\"p\">{`bannerConfigAggregator`}</inlineCode>{`) is a function that retrieves both content and style properties from the content type's HTML. Aggregators typically use both DOM properties and several provided framework utility functions to retrieve these properties and write them to flat property objects used to populate the content type React components. For each of your custom content types, you will need to create your own property aggregator. See `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/integrations/pagebuilder/custom-components/add-aggregator/\"\n      }}>{`Add aggregator`}</a>{` for details.`}</p>\n    <h3 {...{\n      \"id\": \"content-type-component\"\n    }}>{`Content type component`}</h3>\n    <p><em parentName=\"p\">{`Integration point`}</em>{`. The content type component is a React component that is equivalent to a Page Builder content type. There are 15 content type components within PWA Studio: Row, Column, Tabs, Banners, Sliders, and so on. Each content type component is populated with the original content and style properties from the content type to faithfully represent your Page Builder content within a PWA Studio app like Venia. For each of your custom content types, you will need to create the equivalent content type React component . See `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/integrations/pagebuilder/custom-components/add-component/\"\n      }}>{`Add component`}</a>{` for details.`}</p>\n    <h3 {...{\n      \"id\": \"contenttypefactory\"\n    }}>{`ContentTypeFactory`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<ContentTypeFactory />`}</inlineCode>{` component parses a property object tree to retrieve the equivalent React component for each content type property object it finds. It then populates these components and sends them back to the PWA Studio app as a composite React element displayed to the end user.`}</p>\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How it works`}</h2>\n    <p>{`The framework executes on the client side to ensure compatibility with the various hosting options available for Adobe Commerce and Magento Open Source. The following video and subsequent flow diagram describes how the parts of the framework combine to render Page Builder components within the Venia app.`}</p>\n    <div style={{\n      \"position\": \"relative\",\n      \"overflow\": \"hidden\",\n      \"paddingTop\": \"56.25%\",\n      \"border\": \"1px solid #ccc\"\n    }}>\n   <iframe style={{\n        \"position\": \"absolute\",\n        \"top\": \"0\",\n        \"left\": \"0\",\n        \"width\": \"100%\",\n        \"height\": \"100%\",\n        \"border\": \"0\"\n      }} title=\"Adobe Video Publishing Cloud Player\" src=\"https://video.tv.adobe.com/v/31596t2/?enable10seconds=on&hidetitle=true&quality=9&speedcontrol=on\" frameBorder=\"2\" webkitallowfullscreen mozallowfullscreen allowFullScreen scrolling=\"no\"></iframe>\n    </div>\n    <p>{`The following diagram describes the same process shown in the video, followed by detailed explanations of each step in the process.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-pwa-studio/assets/8b921135871c3b3a01c4e38dbfd421d2/PageBuilderIntegrationDetails.svg\",\n        \"alt\": \"Page Builder Integration Details\"\n      }}></img></p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The `}<strong parentName=\"p\">{`Venia app`}</strong>{` sends a GraphQL query to get the user's requested page. This requested page comes from the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` field of `}<inlineCode parentName=\"p\">{`cms_pages`}</inlineCode>{` table in the application's database. The content returned is an HTML string with Page Builder meta data. We call this HTML string the master format, which is passed to the `}<inlineCode parentName=\"p\">{`<RichContent />`}</inlineCode>{` component for initial processing.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The `}<strong parentName=\"p\">{`RichContent`}</strong>{` component determines if the HTML string contains Page Builder content, using simple pattern recognition. If the HTML does not include Page Builder content, it is returned to Venia and rendered as plain HTML. If the HTML does include Page Builder content, the HTML string (which we can now define as a master format) is passed to the `}<inlineCode parentName=\"p\">{`<PageBuilder />`}</inlineCode>{` framework component, which starts the process of matching the content types within the master format to their equivalent PWA Studio React components.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The `}<strong parentName=\"p\">{`PageBuilder`}</strong>{` framework component passes the master format to the framework's parser function called `}<inlineCode parentName=\"p\">{`parseStorageHTML()`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The `}<strong parentName=\"p\">{`parser`}</strong>{` function parses the master format HTML recursively to decompose all the Page Builder content types into their own `}<inlineCode parentName=\"p\">{`HTMLElement`}</inlineCode>{` strings for further processing. When the parser finds a content type, it uses the framework's config function to access that content type's property aggregator. The aggregator retrieves content and styles from the `}<inlineCode parentName=\"p\">{`HTMLElement`}</inlineCode>{` and writes them to a flat object (used later to hydrate the content type component).`}</p>\n        <p parentName=\"li\">{`Each Page Builder content type has its own corresponding property aggregator. For example, the Heading content type (rendered in the master format as HTML) has a Heading aggregator (`}<inlineCode parentName=\"p\">{`headingConfigAggregator`}</inlineCode>{`), which converts the Heading's HTML properties to a flat object with those same properties. The parser does this for each content type it finds in the master format: uses the `}<inlineCode parentName=\"p\">{`getContentTypeConfig()`}</inlineCode>{` function to find and run the content type's property aggregator, which returns an object with both the content and the style properties for that content type. All CMS pages built with Page Builder have at least two content types: a Row content type and at least one other content type contained within that Row, such as a Banner.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`When the `}<strong parentName=\"p\">{`parser`}</strong>{` function finishes processing all the content types within the master format, it returns a property object tree for those content types back to the `}<inlineCode parentName=\"p\">{`<PageBuilder />`}</inlineCode>{` component.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The `}<strong parentName=\"p\">{`PageBuilder`}</strong>{` framework component passes the property object tree to the framework's `}<inlineCode parentName=\"p\">{`<ContentTypeFactory />`}</inlineCode>{` component for further processing.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Much like in step 4 with the parser, the framework's `}<strong parentName=\"p\">{`ContentTypeFactory`}</strong>{` component retrieves the equivalent React component for each content type property object it finds within the object tree.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`The `}<strong parentName=\"p\">{`ContentTypeFactory`}</strong>{` populates those React components with the property values retrieved from each content type's property aggregator.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`And finally, the `}<strong parentName=\"p\">{`PageBuilder`}</strong>{` framework component returns a composite React element with all the Page Builder content type components needed to render the original Page Builder content within a PWA Studio app.`}</p>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","style","title","src","frameBorder","webkitallowfullscreen","mozallowfullscreen","allowFullScreen","scrolling","variant","slots","isMDXComponent"],"sourceRoot":""}