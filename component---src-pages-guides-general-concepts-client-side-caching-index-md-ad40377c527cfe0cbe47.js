(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[9625],{74121:function(e,t,a){"use strict";a.r(t),a.d(t,{_frontmatter:function(){return s},default:function(){return c}});var r=a(22122),n=a(19756),o=(a(15007),a(64983)),i=a(99536),l=["components"],s={},d={_frontmatter:s},m=i.Z;function c(e){var t=e.components,a=(0,n.Z)(e,l);return(0,o.mdx)(m,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"client-side-caching"},"Client-side caching"),(0,o.mdx)("p",null,"Client-side caching is the storage of network data to a local cache for future re-use."),(0,o.mdx)("h2",{id:"overview"},"Overview"),(0,o.mdx)("p",null,"Client-server communication is slow and expensive.\nPerformance is an important feature for any Progressive Web Application (PWA), so\nrequests to the server should be minimized."),(0,o.mdx)("p",null,"Offline mode is also a required feature for a PWA.\nIn offline mode, the application must be able to serve pages that have been recently viewed."),(0,o.mdx)("p",null,"Applications implement these features with the help of a client-side cache.\nAfter the application fetches network data, it stores that resource in a local cache.\nOnce a resource has been cached, the service worker uses the cache on future requests for that resource to boost performance."),(0,o.mdx)("h2",{id:"service-worker-caching"},"Service Worker caching"),(0,o.mdx)("p",null,"A ",(0,o.mdx)("a",{parentName:"p",href:"https://developers.google.com/web/ilt/pwa/introduction-to-service-worker"},"service worker")," is a JavaScript file that runs in a separate thread from the main execution thread in a web application.\nService workers can intercept network requests and fetch cached data or store results from a network request into the cache."),(0,o.mdx)("h3",{id:"venia-service-worker"},"Venia service worker"),(0,o.mdx)("p",null,"Venia's service worker uses Google's ",(0,o.mdx)("a",{parentName:"p",href:"https://developers.google.com/web/tools/workbox/"},"Workbox")," library.\nIts behavior is defined in files inside the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/pwa-studio/blob/develop/packages/venia-concept/src/ServiceWorker/"},"src/ServiceWorker/")," directory."),(0,o.mdx)("p",null,"You do not need to use Workbox to define service worker behavior, but\nWorkbox makes this task easier by removing boilerplate code that is always used when working with service workers."),(0,o.mdx)("p",null,"Venia uses the following ",(0,o.mdx)("a",{parentName:"p",href:"https://developers.google.com/web/tools/workbox/modules/workbox-strategies"},"caching strategies")," with its service worker:"),(0,o.mdx)("h4",{id:"stale-while-revalidate"},"Stale-while-revalidate"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate"},"stale-while-revalidate")," strategy tells the service worker to use a cached response if it exists.\nA separate network request is made for that resource and the cache is updated for future requests."),(0,o.mdx)("p",null,"This strategy is used when the most up to date version of a resource is not necessary for an application."),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null},"Route pattern"),(0,o.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"/"),(0,o.mdx)("td",{parentName:"tr",align:null},"The application root")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"/.","\\",".js$"),(0,o.mdx)("td",{parentName:"tr",align:null},"JavaScript files")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"/\\/media\\/catalog.*",".","(?:png","|","gif","|","jpg","|","jpeg","|","svg)$/"),(0,o.mdx)("td",{parentName:"tr",align:null},"Catalog image files")))),(0,o.mdx)("h4",{id:"network-first"},"Network first"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache"},"network first")," strategy tells the service worker to get a resource from the network first.\nIf a network connection cannot be made, the service worker uses the cache as a fallback."),(0,o.mdx)("p",null,"This strategy is used for data that may change frequently on the server."),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null},"Route pattern"),(0,o.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"\\",".html$"),(0,o.mdx)("td",{parentName:"tr",align:null},"HTML pages")))),(0,o.mdx)("h4",{id:"cache-first"},"Cache first"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network"},"cache first")," strategy tells the service worker to use the data from the cache.\nUnlike the stale-while-revalidate strategy, no network call is made to update the cache."),(0,o.mdx)("p",null,"If a response is not found in the cache, a network call is made to get the resource and cache the response."),(0,o.mdx)("p",null,"This strategy is used for non-critical assets that do not get updated very often."),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null},"Route pattern"),(0,o.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"images"),(0,o.mdx)("td",{parentName:"tr",align:null},"Image files served from the application")))),(0,o.mdx)("h2",{id:"caching-in-the-apollo-graphql-client"},"Caching in the Apollo GraphQL client"),(0,o.mdx)("p",null,"The Venia implementation storefront uses the Apollo GraphQL client to make requests to the Magento GraphQL endpoint.\nIt also incorporates the default ",(0,o.mdx)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/advanced/caching"},"InMemoryCache")," implementation to add caching abilities to the client."),(0,o.mdx)("p",null,"The cache is persisted between browser sessions in ",(0,o.mdx)("inlineCode",{parentName:"p"},"window.localstorage")," using the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/apollographql/apollo-cache-persist"},"apollo-cache-persist")," module.\nThis lets the Apollo client maintain its cached data even when the user closes the application."),(0,o.mdx)("p",null,"By default, InMemoryCache uses a cache first strategy for all queries.\nThis strategy is set using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"fetchPolicy")," prop on the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Query")," component."),(0,o.mdx)("p",null,"Caching for Apollo is set up in the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/pwa-studio/blob/master/packages/venia-ui/lib/drivers/adapter.js"},"src/drivers/adapter.js")," file."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-general-concepts-client-side-caching-index-md-ad40377c527cfe0cbe47.js.map