{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/general-concepts/state-management/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mSAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,yBACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,oBADR,qBAGA,uIACA,eACE,GAAM,YADR,aAGA,mQAEA,oUAGA,eACE,GAAM,6BADR,8BAGA,uGACA,kNAE6B,cAAGC,WAAW,IACvC,KAAQ,kDADiB,UAF7B,MAKA,wJAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,+QAcL,8VAIA,mJACA,eACE,GAAM,wCADR,yCAGA,qLAEA,eACE,GAAM,SADR,UAGA,mBAAG,cAAGA,WAAW,IACb,KAAQ,qDADT,SAAH,kLAIwB,cAAGA,WAAW,IAClC,KAAQ,uCADY,SAJxB,MAOA,kGAAmF,cAAGA,WAAW,IAC7F,KAAQ,yCADuE,WAAnF,kEAGgD,cAAGA,WAAW,IAC1D,KAAQ,uCADoC,UAHhD,sDAMA,yDAA0C,cAAGA,WAAW,IACpD,KAAQ,iDAD8B,YAA1C,+DAGkB,cAAGA,WAAW,IAC5B,KAAQ,oDADM,aAHlB,8DAMA,gMACiD,cAAGA,WAAW,IAC3D,KAAQ,uGACP,uBAAYA,WAAW,KAAvB,sBAHL,MAIA,+TAEA,6GACyB,uBAAYA,WAAW,KAAvB,qBADzB,0JAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,qZAcL,eACE,GAAM,eADR,gBAGA,mEAAoD,cAAGA,WAAW,IAC9D,KAAQ,6CADwC,SAApD,mBAGU,cAAGA,WAAW,IACpB,KAAQ,oFADF,uBAHV,iIAMA,wSAGA,8GAA+F,cAAGA,WAAW,IACzG,KAAQ,iDADmF,kBAA/F,gFAGkC,cAAGA,WAAW,IAC5C,KAAQ,8CADsB,sBAHlC,+GAOA,eACE,GAAM,kCADR,mCAGA,0ZAIA,eACE,GAAM,qBADR,sBAGA,2PAEe,eAAIA,WAAW,KAAf,iBAFf,MAGA,iEAAkD,cAAGA,WAAW,IAC5D,KAAQ,yCADsC,WAAlD,sJAIA,qFACA,uBAAYA,WAAW,KAAvB,oBADA,8EAEc,uBAAYA,WAAW,KAAvB,oBAFd,sDAGA,iIAAkH,cAAGA,WAAW,IAC5H,KAAQ,mIACP,uBAAYA,WAAW,KAAvB,6BAFL,kDAG+B,uBAAYA,WAAW,KAAvB,4BAH/B,kFAIA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,0uBA6BL,eACE,GAAM,uBADR,wBAGA,gFAAiE,uBAAYA,WAAW,KAAvB,4BAAjE,mOAGA,+DAAgD,uBAAYA,WAAW,KAAvB,4BAAhD,qEACA,mDAAoC,cAAGA,WAAW,IAC9C,KAAQ,qFADwB,gBAApC,qJAIA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,sgBA6BTJ,EAAWK,gBAAiB","file":"component---src-pages-guides-general-concepts-state-management-index-md-5a0c770b665f8341ab4e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"state-management\"\n    }}>{`State management`}</h1>\n    <p>{`State management describes the way the application handles changing state data as a result of user interactions.`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`An application, such as a PWA storefront, uses state data to render dynamic content to the user.\nInteractions, such as clicking on a button or loading the page, modify the state and update the appearance or behavior of the application.`}</p>\n    <p>{`For example, a shopper clicks on a button to add an item to the shopping cart.\nThe application needs a way to add that item to the shopping cart while the shopper continues to browse the application.\nIt also needs to update the visual components that use shopping cart data to reflect the new state.`}</p>\n    <h2 {...{\n      \"id\": \"local-versus-global-state\"\n    }}>{`Local versus global state`}</h2>\n    <p>{`Local and global are the two different types of state a component can depend on.`}</p>\n    <p>{`Local state data is any data scoped within a component or its children components.\nThis type of data is not shared with a component's parent or peer data.\nOtherwise, that data should be `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/lifting-state-up.html\"\n      }}>{`lifted`}</a>{`.`}</p>\n    <p>{`For example, a button component's disabled state is never used outside that component, so\nit is categorized as local state data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const MyButton = () => {\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  const handleClick = useCallback(() => setIsDisabled(true), []);\n\n  return (\n    <button onClick={handleClick} disabled={isDisabled}>\n      Click me!\n    </button>\n  );\n};\n`}</code></pre>\n    <p>{`Global state data is any data made available to components in the entire application.\nComponents that depend on a global state value subscribe to changes for that value and re-render themselves.\nMost components do not depend on the entire global state.\nInstead, a component only uses small pieces of the entire global state.`}</p>\n    <p>{`Shopping cart data is an example of global state data that components in different levels of the application use and modify.`}</p>\n    <h2 {...{\n      \"id\": \"common-state-management-technologies\"\n    }}>{`Common state management technologies`}</h2>\n    <p>{`There are many libraries and framework features that implement state management.\nThis section describes two such technologies used in the PWA Studio project.`}</p>\n    <h3 {...{\n      \"id\": \"redux\"\n    }}>{`Redux`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/introduction/getting-started\"\n      }}>{`Redux`}</a>{` is a state management design pattern and library.\nIt promotes the idea of a global object tree that contains the state of the whole application.\nThis object is known as a `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/glossary#store\"\n      }}>{`store`}</a>{`.`}</p>\n    <p>{`The store is a read-only object, which can only be updated by dispatching a `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/glossary#reducer\"\n      }}>{`reducer`}</a>{` function.\nReducer functions accept the current state and an `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/basics/actions\"\n      }}>{`action`}</a>{` object as parameters and returns the next state.`}</p>\n    <p>{`Application components are able to `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/api/store#dispatchaction\"\n      }}>{`dispatch`}</a>{` various actions to update the state.\nComponents can also `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/api/store#subscribelistener\"\n      }}>{`subscribe`}</a>{` to state changes to update their appearance or behavior.`}</p>\n    <p>{`Early versions of PWA Studio used the Redux library directly as the primary mechanism for managing application state,\nand the Redux pattern can be seen in hooks such as `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/pwa-studio/blob/develop/packages/peregrine/lib/hooks/useRestResponse.js\"\n      }}><inlineCode parentName=\"a\">{`useRestResponse()`}</inlineCode></a>{`.`}</p>\n    <p>{`Currently, PWA Studio abstracts away its Redux implementation details using Peregrine hooks and context providers.\nThis opens up the possibility of the project replacing Redux in Peregrine with another state management library without breaking state dependent components, such as those in Venia.`}</p>\n    <p>{`PWA Studio allows you to customize reducers and enhancers.\nThe following example uses `}<inlineCode parentName=\"p\">{`combineReducers()`}</inlineCode>{` to combine the default Peregrine reducers with custom reducers specific to the project and uses the combined reducers when creating the Redux store.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Example src/store.js file\n\nimport { combineReducers, createStore } from \"redux\";\nimport { enhancer, reducers } from \"@magento/peregrine\";\n\nimport myReducers from \"./lib/reducers\";\n\n// You can add your own reducers here and combine them with the Peregrine exports.\nconst rootReducer = combineReducers({ ...reducers, ...myReducers });\n\nexport default createStore(rootReducer, enhancer);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"react-hooks\"\n    }}>{`React hooks`}</h3>\n    <p>{`React version 16.8 introduced the concept of `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-intro.html\"\n      }}>{`hooks`}</a>{`.\nHooks allow `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/components-and-props.html#function-and-class-components\"\n      }}>{`function components`}</a>{` to manage their own internal state by letting them use the same component lifecycle features available to class components.`}</p>\n    <p>{`Earlier versions of React only allowed class components to manage state,\nso stateful classes often became complex and hard to understand.\nHooks help developers to decompose large components into smaller functions that are focused on specific logic, such as fetching data.`}</p>\n    <p>{`Since PWA Studio favors using function components over classes, it uses many of React's `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-reference.html\"\n      }}>{`built-in hooks`}</a>{` in its Venia and Peregrine libraries.\nThe Peregrine library also provides `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-custom.html\"\n      }}>{`custom React hooks`}</a>{` for storefront developers.\nThese hooks contain common Magento storefront logic such as state management.`}</p>\n    <h2 {...{\n      \"id\": \"state-management-in-pwa-studio\"\n    }}>{`State management in PWA Studio`}</h2>\n    <p>{`State management in PWA Studio is a mix of the Redux library, React hooks, and React context providers.\nThe Redux library is the underlying technology that powers state management behind the scenes, but\ncomponents do not interact with the global store directly.\nInstead, components that need global state data use React hooks and context providers to read or update the current state.`}</p>\n    <h3 {...{\n      \"id\": \"context-providers\"\n    }}>{`Context providers`}</h3>\n    <p>{`React components look and behave as a result of their props.\nNormally, this means an application needs to explicitly pass state data as a prop down the React application tree to components that need that data.\nThis is known as `}<em parentName=\"p\">{`prop drilling`}</em>{`.`}</p>\n    <p>{`To avoid prop drilling, React provides the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/context.html\"\n      }}>{`Context`}</a>{` feature.\nThe Context feature allows an application to define a value and make it available to its descendants without passing it down the tree.`}</p>\n    <p>{`A Context object contains a Provider and Consumer property.\nA `}<inlineCode parentName=\"p\">{`Context.Provider`}</inlineCode>{` component defines the shared data for its children, and\na corresponding `}<inlineCode parentName=\"p\">{`Context.Consumer`}</inlineCode>{` acquires the data and subscribes to any changes.`}</p>\n    <p>{`PWA Studio uses the Context feature to provide application state data to storefront components through the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/pwa-studio/blob/develop/packages/peregrine/lib/PeregrineContextProvider/peregrineContextProvider.js\"\n      }}><inlineCode parentName=\"a\">{`PeregrineContextProvider`}</inlineCode></a>{` component.\nWrapping an application with the `}<inlineCode parentName=\"p\">{`PeregrineContextProvider`}</inlineCode>{` lets its components access different slices of the entire application state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Example src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Adapter } from '@magento/venia-drivers';\nimport { PeregrineContextProvider } from '@magento/peregrine';\n\nimport store from './store'; // This was defined in the previous example\nimport MyApplication from \\`./src/components/MyApplication\\`;\n\nconst apiBase = new URL('/graphql', location.origin).toString();\n\nReactDOM.render(\n    <Adapter\n        apiBase={apiBase}\n        apollo={{ link: authLink.concat(Adapter.apolloLink(apiBase)) }}\n        store={store}\n    >\n        <PeregrineContextProvider>\n            <MyApplication />\n        </PeregrineContextProvider>\n    </Adapter>,\n    document.getElementById('root')\n);\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"global-state-slices\"\n    }}>{`Global state slices`}</h3>\n    <p>{`Peregrine exposes global state data in slices through the `}<inlineCode parentName=\"p\">{`PeregrineContextProvider`}</inlineCode>{` component and custom React hooks.\nA state data slice is a subset of values from the global state.\nEach slice contains data about a specific part of the application, such as the shopping cart state or user session state.`}</p>\n    <p>{`To access a global state slice, wrap the `}<inlineCode parentName=\"p\">{`PeregrineContextProvider`}</inlineCode>{` around the main application (as shown in the previous example).`}</p>\n    <p>{`Next, import the appropriate `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/pwa-studio/tree/develop/packages/peregrine/lib/context\"\n      }}>{`context hook`}</a>{` and decompose the array returned by the hook function call.\nThe decomposed array yields the state data and an API object to update that state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// Example src/components/MyWelcomeMessage/myWelcomeMessage.js\n\nimport { useUserContext } from \"@magento/peregrine/lib/context/user\";\n\nconst MyWelcomeMessage = () => {\n  const [userContext, userContextApi] = useUserContext();\n\n  const { isSignedIn, currentUser } = userContext;\n  const { firstname, lastname } = currentUser;\n\n  if (isSignedIn) {\n    return (\n      <span>\n        Welcome {firstname} {lastname}!\n      </span>\n    );\n  }\n\n  return null;\n};\n\nexport default MyWelcomeMessage;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}