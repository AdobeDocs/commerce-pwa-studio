{"version":3,"file":"component---src-pages-guides-general-concepts-configuration-index-md-177c691433119a73007b.js","mappings":"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","sources":["webpack://commerce-pwa-studio/./src/pages/guides/general-concepts/configuration/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"configuration-management\"\n    }}>{`Configuration management`}</h1>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/guides/packages/buildpack/\"\n      }}>{`Buildpack`}</a>{` library provides the tools you need to configure your environment and larger, overall workflows that a developer has to configure and control.\nThese configurations differ across projects and different environments within those projects.\nFor example, environments for development, testing, staging, and production are configured to support different behaviors.`}</p>\n    <h2 {...{\n      \"id\": \"the-env-file\"\n    }}>{`The `}<inlineCode parentName=\"h2\">{`.env`}</inlineCode>{` file`}</h2>\n    <p>{`Like the rest of PWA Studio, buildpack uses environment variables as its central source of configuration settings.\nA PWA Studio project using buildpack requires a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/dotenv\"\n      }}><inlineCode parentName=\"a\">{`.env`}</inlineCode>{` file`}</a>{` in its root directory.\nEach line in the file contains a configuration using the following form:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`NAME=value\n`}</code></pre>\n    <p>{`In any script in any programming language, you can access these environment variables directly by sourcing the file as a legal POSIX shell script.`}</p>\n    <h2 {...{\n      \"id\": \"command-line-interface-cli\"\n    }}>{`Command Line Interface (CLI)`}</h2>\n    <p>{`Buildpack provides a `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/api/buildpack/cli/\"\n      }}>{`Buildpack CLI`}</a>{` for creating `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` files and validating environments.\nIt also provides library methods for connecting environment management workflows with other tools.`}</p>\n    <p>{`Using these provided tools, you can keep global configuration values in a central location and propagate them throughout your project.\nThis lets you pass common settings down to different library functions without tightly coupling those settings together.`}</p>\n    <h2 {...{\n      \"id\": \"configuration-management-rationale\"\n    }}>{`Configuration management rationale`}</h2>\n    <p>{`PWA Studio follows the principle that `}<em parentName=\"p\">{`all configuration that `}<strong parentName=\"em\">{`can`}</strong>{` be environment variables, `}<strong parentName=\"em\">{`should`}</strong>{` be environment variables`}</em>{`.`}</p>\n    <p>{`Environment variables are portable, cross-platform, and reasonably secure.\nThey can be individually overridden to give the user a great deal of control over a complex system.\nThe `}<a parentName=\"p\" {...{\n        \"href\": \"https://12factor.net/config\"\n      }}>{`twelve-factor app`}</a>{` methodology recommends storing config in the environment as its third factor.`}</p>\n    <p>{`Many tools use environment variables strictly as edge-case overrides and store their canonical configuration in other formats because\nunder the strict POSIX definition, environment variables have some limitations:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`An environment variable name is case insensitive.`}</li>\n      <li parentName=\"ul\">{`An environment variable's value can only be a string.`}</li>\n      <li parentName=\"ul\">{`Environment variables cannot be nested nor schematized, so they have no built-in data structures.`}</li>\n      <li parentName=\"ul\">{`Environment variables all belong to a single namespace, and every running process has access to all of them.`}</li>\n    </ul>\n    <p>{`These drawbacks are serious enough that some applications use alternate formats, such as:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`XML`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`JSON`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`YAML`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`INI`}</inlineCode>{` / `}<inlineCode parentName=\"li\">{`TOML`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.properties`}</inlineCode>{` files in Java`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.plist`}</inlineCode>{` files in MacOS`}</li>\n      <li parentName=\"ul\">{`PHP associative arrays`}</li>\n      <li parentName=\"ul\">{`Apache directives`}</li>\n    </ul>\n    <p>{`These formats have the following advantages over environment variables:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`They are a standard human-readable file format`}</li>\n      <li parentName=\"ol\">{`They can support nesting and/or namespacing to organize values`}</li>\n      <li parentName=\"ol\">{`They support data types and metadata`}</li>\n    </ol>\n    <p>{`However, none of these formats have `}<em parentName=\"p\">{`won`}</em>{` and become an undisputed replacement for environment variables.\nEach one has its own set of quirks and undefined behaviors.\nNone of them are deeply integrated with OS, shell, and container environments, and\nthey often do not work consistently across language runtimes.`}</p>\n    <p>{`PWA Studio chooses to use environment variables, while providing simple tools for file format, namespacing, and validation.`}</p>\n    <p>{`A centralized configurator passes on formatted pieces of the environment to specific tools as parameters, so\nthese tools do not need to know the specifics of the configuration scheme.\nEntry point scripts, such as `}<inlineCode parentName=\"p\">{`server.js`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`webpack.config.js`}</inlineCode>{`, can use the `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/api/buildpack/cli/load-environment-file/\"\n      }}>{`loadEnvironment()`}</a>{` tool to deserialize environment variables into any kind of data structure, while storing persistent values in an `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file in the project root directory.`}</p>\n    <p>{`Buildpack combines the features of several tools:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/dotenv\"\n        }}>{`dotenv`}</a>{` for managing environment variables with `}<inlineCode parentName=\"li\">{`.env`}</inlineCode>{` files`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://npmjs.com/package/envalid\"\n        }}>{`envalid`}</a>{` for describing, validating, and making defaults for settings`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://npmjs.com/package/camelspace\"\n        }}>{`camelspace`}</a>{` for easily translating configuration between flat environment variables and namespaced objects`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"best-practices\"\n    }}>{`Best practices`}</h2>\n    <p>{`The `}<strong parentName=\"p\">{`config rule`}</strong>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://12factor.net/config\"\n      }}>{`twelve-factor app`}</a>{` methodology distinguishes configuration that \"does not vary between deploys\" from configuration that does.\nIt requires that configuration that does change between deploys be stored in the environment.\nPWA Studio does not make such a distinction.\nFor config that must never vary, the PWA project maintainer can hardcode that configuration in the entrypoint scripts what use `}<inlineCode parentName=\"p\">{`loadEnvironment()`}</inlineCode>{`.`}</p>\n    <p>{`To have environment-variable-based configuration management and enjoy the benefits of file format, namespacing, and validation at the same time, it's important to use `}<inlineCode parentName=\"p\">{`loadEnvironment()`}</inlineCode>{` in a certain way.`}</p>\n    <h3 {...{\n      \"id\": \"configuration-object\"\n    }}>{`Configuration object`}</h3>\n    <p>{`The purpose of a function such as `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/api/buildpack/cli/load-environment-file/\"\n      }}>{`loadEnvironment()`}</a>{` is to keep configuration organized without tightly coupling a system to a manager object.\nTo achieve this, it is important to use `}<inlineCode parentName=\"p\">{`loadEnvironment()`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`Configuration`}</inlineCode>{` object it produces at the \"top level\" or entry point of a program.`}</p>\n    <p>{`Avoid passing a `}<inlineCode parentName=\"p\">{`Configuration`}</inlineCode>{` object directly to other tools.\nThese tools should be usable without `}<inlineCode parentName=\"p\">{`loadEnvironment()`}</inlineCode>{`.\nIt is always the responsibility of an outer function to pass plain configuration to an inner dependency.`}</p>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`Configuration`}</inlineCode>{` object only when moving between logic layers:`}</p>\n    <p><strong parentName=\"p\">{`Bad`}</strong>{`: passing the `}<inlineCode parentName=\"p\">{`Configuration`}</inlineCode>{` object to library methods`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`await PWADevServer.configure(\n  {\n    publicPath: config.output.publicPath,\n    graphqlPlayground: true,\n    projectConfig: loadEnvironment(__dirname),\n  },\n  config\n);\n`}</code></pre>\n    <p>{`The same principle holds when creating your own utilities.`}</p>\n    <p><strong parentName=\"p\">{`Bad`}</strong>{`: expecting a `}<inlineCode parentName=\"p\">{`Configuration`}</inlineCode>{` object in a library function`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`class MyWebpackPlugin {\n  constructor(config) {\n    this.options = config.section(\"myWebpackPlugin\");\n  }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong>{`: passing plain objects created by the Configuration object`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const projectConfig = await loadEnvironment(__dirname);\nawait PWADevServer.configure(\n  {\n    publicPath: config.output.publicPath,\n    graphqlPlayground: true,\n    ...projectConfig.sections(\"devServer\", \"imageService\", \"customOrigin\"),\n    ...projectConfig.section(\"magento\"),\n  },\n  config\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"naming-convention\"\n    }}>{`Naming convention`}</h3>\n    <p>{`POSIX standard environment variables may not be case sensitive and may not allow very many special characters.`}</p>\n    <p>{`The best policy is to use `}<inlineCode parentName=\"p\">{`ALL_CAPS_UNDERSCORE_DELIMITED_ALPHANUMERIC_VARIABLE_NAMES`}</inlineCode>{` when defining environment variables directly.\n`}<strong parentName=\"p\">{`Buildpack will ignore any environment variables which do not follow this convention.`}</strong></p>\n    <p>{`Buildpack converts between this strict all-caps format (also known as `}<strong parentName=\"p\">{`SCREAMING_SNAKE_CASE`}</strong>{`) and a more convenient JavaScript object which can be nested at any level of delimiter.\nWhen defining new environment variables, make their names long and safely namespace them with prefixes as long as necessary.\n`}<inlineCode parentName=\"p\">{`Configuration`}</inlineCode>{` objects have `}<inlineCode parentName=\"p\">{`.section()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`.sections()`}</inlineCode>{` methods to create targeted, small JavaScript objects with shorter names.`}</p>\n    <h3 {...{\n      \"id\": \"fallback\"\n    }}>{`Fallback`}</h3>\n    <p>{`By default, buildpack respects three levels of \"fallback\" values:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Currently declared environment variables, which can be populated on process startup`}</li>\n      <li parentName=\"ol\">{`Values from the `}<inlineCode parentName=\"li\">{`.env`}</inlineCode>{` file in the project root`}</li>\n      <li parentName=\"ol\">{`Defaults from the metadata in the `}<a parentName=\"li\" {...{\n          \"href\": \"/commerce-pwa-studio/api/buildpack/environment/variables/\"\n        }}>{`Project Environment Definitions`}</a></li>\n    </ol>\n    <p>{`Additional layers of configuration and on-disk fallback are discouraged.\nInside scripts, environment variables may be combined and merged, but\ntoo much fall-through of project configuration can result in unpredictable and hard-to-maintain runtime configuration.`}</p>\n    <h3 {...{\n      \"id\": \"project-environment-definitions\"\n    }}>{`Project environment definitions`}</h3>\n    <p>{`All the environment variables expected and/or used by buildpack are defined in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/pwa-studio/blob/develop/packages/pwa-buildpack/envVarDefinitions.json\"\n      }}>{`packages/pwa-buildpack/envVarDefinitions.json`}</a>{`.`}</p>\n    <p>{`This file is used for:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Creating a self-documenting `}<inlineCode parentName=\"li\">{`.env`}</inlineCode>{` file`}</li>\n      <li parentName=\"ul\">{`Validating environments`}</li>\n      <li parentName=\"ul\">{`Deprecating and supporting older settings which have changed`}</li>\n    </ul>\n    <p>{`If you are contributing to the PWA Studio project and want to add new functionality that should be configured via the environment or change any environment configuration, follow these best practices:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Define any new variables in the `}<inlineCode parentName=\"p\">{`packages/pwa-buildpack/envVarDefinitions.json`}</inlineCode>{` file.\nThe variable definition object follows the API of `}<a parentName=\"p\" {...{\n            \"href\": \"https://npmjs.com/package/envalid\"\n          }}>{`envalid`}</a>{`, with the addition of a `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` property indicating the `}<inlineCode parentName=\"p\">{`envalid`}</inlineCode>{` method to use.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Organize variables into named sections in the `}<inlineCode parentName=\"p\">{`sections`}</inlineCode>{` list.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use the namespacing practices encouraged by `}<a parentName=\"p\" {...{\n            \"href\": \"https://npmjs.com/package/camelspace\"\n          }}>{`camelspace`}</a>{` and `}<inlineCode parentName=\"p\">{`loadEnvironment()`}</inlineCode>{`.`}</p>\n        <p parentName=\"li\">{`For example, a new utility `}<inlineCode parentName=\"p\">{`goodStuff()`}</inlineCode>{` might demand environment variables starting with `}<inlineCode parentName=\"p\">{`GOOD_STUFF_`}</inlineCode>{`,\nand `}<inlineCode parentName=\"p\">{`packages/pwa-buildpack/envVarDefinitions.json`}</inlineCode>{` might include a new section in its `}<inlineCode parentName=\"p\">{`sections`}</inlineCode>{` list.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`After making any changes to `}<inlineCode parentName=\"p\">{`packages/pwa-buildpack/envVarDefinitions.json`}</inlineCode>{`, record them in the `}<inlineCode parentName=\"p\">{`changes`}</inlineCode>{` list in that file.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Change entries are objects which include:`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`type`}</inlineCode>{`: `}<strong parentName=\"li\">{`Required.`}</strong>{` The type of the change, either `}<inlineCode parentName=\"li\">{`removed`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`renamed`}</inlineCode>{`. No other types of change need change entries.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{`: `}<strong parentName=\"li\">{`Required.`}</strong>{` The affected environment variable name.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`dateChanged`}</inlineCode>{`: `}<strong parentName=\"li\">{`Required.`}</strong>{` The date the change entry was added, in a format parseable by the JavaScript `}<inlineCode parentName=\"li\">{`Date`}</inlineCode>{` constructor.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`warnForDays`}</inlineCode>{`: `}<strong parentName=\"li\">{`Optional`}</strong>{`, default `}<inlineCode parentName=\"li\">{`180`}</inlineCode>{`. A number of days that the warning should keep logging on every run, counting from the `}<inlineCode parentName=\"li\">{`dateChanged`}</inlineCode>{`. The default `}<em parentName=\"li\">{`and`}</em>{` maximum is 180 days, so use this property only if you want the change to log for a `}<em parentName=\"li\">{`shorter`}</em>{` time than default. This prevents an old, out-of-date warning message from cluttering logs long after the user no longer needs to see it.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`removed`}</inlineCode>{` entries should include a human-readable `}<inlineCode parentName=\"li\">{`reason`}</inlineCode>{`.\n`}<strong parentName=\"li\">{`After removing a variable definition, leave the `}<inlineCode parentName=\"strong\">{`removed`}</inlineCode>{` entry permanently`}</strong>{` to log an error if the old variable is found, encouraging out-of-date installations to upgrade.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`renamed`}</inlineCode>{` entries should include the old name as `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{`, and the new name as `}<inlineCode parentName=\"li\">{`updated`}</inlineCode>{`.\nThey must also include a `}<inlineCode parentName=\"li\">{`supportLegacy`}</inlineCode>{` boolean.\nIf this is `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, then `}<inlineCode parentName=\"li\">{`loadEnvironment()`}</inlineCode>{` will continue to support the old value while logging a warning, until either the new variable name has a value, or the change entry expires.`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}