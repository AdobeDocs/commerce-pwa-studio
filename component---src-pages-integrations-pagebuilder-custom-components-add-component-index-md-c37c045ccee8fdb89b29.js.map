{"version":3,"file":"component---src-pages-integrations-pagebuilder-custom-components-add-component-index-md-c37c045ccee8fdb89b29.js","mappings":"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","sources":["webpack://commerce-pwa-studio/./src/pages/integrations/pagebuilder/custom-components/add-component/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-component\"\n    }}>{`Add component`}</h1>\n    <p>{`The purpose of a Page Builder component is to recreate a Page Builder content type (from your Adobe Commerce or Magento Open Source instance) to display inside a PWA app. Developing this component is similar to developing other React components in PWA Studio. However, the properties defined within a Page Builder component are determined by the properties returned from your configuration aggregator. The following steps highlight how to put these properties to use in your component:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-pwa-studio/assets/d54d7c9a4488f289768ca8d6b09f9a6b/AddComponentSteps.svg\",\n        \"alt\": \"Add Component steps overview\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"step-1-add-local-props-and-prop-types\"\n    }}>{`Step 1: Add local props and prop-types`}</h2>\n    <p>{`The first step is to declare local variables that match the names of the props being passed from your aggregator, for destructuring. For our `}<inlineCode parentName=\"p\">{`ExampleQuote`}</inlineCode>{`, we declare and assign these properties as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const ExampleQuote = props => {\n    const {\n        quote,\n        author,\n        description,\n        textAlign,\n        border,\n        borderColor,\n        borderWidth,\n        borderRadius,\n        isHidden,\n        marginTop,\n        marginRight,\n        marginBottom,\n        marginLeft,\n        paddingTop,\n        paddingRight,\n        paddingBottom,\n        paddingLeft,\n        cssClasses\n    } = props;\n`}</code></pre>\n    <p>{`With a destructuring assignment, our component takes a `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` object and copies its values to our local variables. All you need to do is make sure the names of your local variables exactly match the names of the `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` passed from your aggregator. As noted before, you can use `}<inlineCode parentName=\"p\">{`console.log(props)`}</inlineCode>{` at the top of your component to see the names of the `}<inlineCode parentName=\"p\">{`keys`}</inlineCode>{` being passed in on the props object.`}</p>\n    <p>{`Along with defining your local variables, you need to add the comparable `}<inlineCode parentName=\"p\">{`prop-types`}</inlineCode>{` to define exactly what can be passed into your component. The `}<inlineCode parentName=\"p\">{`ExampleQuote`}</inlineCode>{` component defines the following `}<inlineCode parentName=\"p\">{`prop-types`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { arrayOf, string, bool } from \"prop-types\";\n\nExampleQuote.propTypes = {\n  quote: string,\n  author: string,\n  description: string,\n  textAlign: string,\n  border: string,\n  borderColor: string,\n  borderWidth: string,\n  borderRadius: string,\n  isHidden: bool,\n  marginTop: string,\n  marginRight: string,\n  marginBottom: string,\n  marginLeft: string,\n  paddingTop: string,\n  paddingRight: string,\n  paddingBottom: string,\n  paddingLeft: string,\n  cssClasses: arrayOf(string),\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-2-add-jsx-markup\"\n    }}>{`Step 2: Add JSX markup`}</h2>\n    <p>{`Your JSX markup should recreate the HTML structure of your Page Builder content type and provide the slots for rendering its content and styles. For example, here is the markup needed to recreate the structure of our Quote content type and host the local content-related `}<inlineCode parentName=\"p\">{`props`}</inlineCode>{` values from our aggregator:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const toHTML = (str) => ({ __html: str });\n\nreturn (\n  <div>\n    <div>{quote}</div>\n    <div>{author}</div>\n    <div dangerouslySetInnerHTML={toHTML(description)} />\n  </div>\n);\n`}</code></pre>\n    <p>{`Because our `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{` property value is HTML, we need to use React's `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml\"\n      }}>{`dangerouslySetInnerHTML`}</a>{` and `}<inlineCode parentName=\"p\">{`__html`}</inlineCode>{` to render it out properly.`}</p>\n    <h2 {...{\n      \"id\": \"step-3-apply-form-styles\"\n    }}>{`Step 3: Apply form styles`}</h2>\n    <p>{`To make it easy to apply all the inline styles from your content type to your Page Builder component, you can create a separate object that contains only the styles retrieved from the content type's form. These styles include those that are retrieved by `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/integrations/pagebuilder/utility-functions/\"\n      }}>{`utility functions`}</a>{` like `}<inlineCode parentName=\"p\">{`getAdvanced()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`getBackgroundImages()`}</inlineCode>{`.`}</p>\n    <p>{`For our component, we created an object called `}<inlineCode parentName=\"p\">{`formStyles`}</inlineCode>{` to group our form styles as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const formStyles = {\n  textAlign,\n  border,\n  borderColor,\n  borderWidth,\n  borderRadius,\n  isHidden,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  paddingTop,\n  paddingRight,\n  paddingBottom,\n  paddingLeft,\n};\n`}</code></pre>\n    <p>{`These are the styles returned from the Advanced form section of our Quote content type (using `}<inlineCode parentName=\"p\">{`getAdvanced()`}</inlineCode>{`). When they are grouped together as shown, we can apply them all at once to our component, as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`return (\n  <div style={formStyles}>\n    <div>{quote}</div>\n    <div>{author}</div>\n    <div dangerouslySetInnerHTML={toHTML(description)} />\n  </div>\n);\n`}</code></pre>\n    <p>{`Now we need to apply the CSS classes we used to style the rest of our content type.`}</p>\n    <h2 {...{\n      \"id\": \"step-4-apply-css-classes\"\n    }}>{`Step 4: Apply CSS classes`}</h2>\n    <p>{`Applying CSS classes to your component in PWA involves importing both your CSS stylesheet and a PWA Studio function called `}<inlineCode parentName=\"p\">{`mergeClasses`}</inlineCode>{`. This function does exactly what its name implies: it merges classes from different sources into a single variable you can use to add your classes to your JSX, using `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{`.`}</p>\n    <p>{`For our component, we import our component stylesheet and the `}<inlineCode parentName=\"p\">{`mergeClasses`}</inlineCode>{` function as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import defaultClasses from \"./exampleQuote.css\";\nimport { mergeClasses } from \"../../../../../classify\";\n`}</code></pre>\n    <p>{`We then merge the classes from our stylesheet with any classes passed in on the props and use a single variable (`}<inlineCode parentName=\"p\">{`classes`}</inlineCode>{`) to apply our consolidated classes to the correct nodes in the JSX:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const classes = mergeClasses(defaultClasses, props.classes);\n\nreturn (\n  <div style={formStyles}>\n    <div className={classes.quote}>{quote}</div>\n    <div className={classes.quoteAuthor}>{author}</div>\n    <div\n      className={classes.quoteDescription}\n      dangerouslySetInnerHTML={toHTML(description)}\n    />\n  </div>\n);\n`}</code></pre>\n    <p>{`Merging the `}<inlineCode parentName=\"p\">{`props.classes`}</inlineCode>{` ensures that our component can apply and override styles from other components.`}</p>\n    <p>{`In the previous code block, we only used a single class, `}<inlineCode parentName=\"p\">{`classes.quote`}</inlineCode>{`, to style the quote in our component. However, our original class required two different classes (`}<inlineCode parentName=\"p\">{`.quote`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`.blue-quote`}</inlineCode>{`) for styling. As a best practice, you want to use the `}<inlineCode parentName=\"p\">{`composes`}</inlineCode>{` construct from `}<a parentName=\"p\" {...{\n        \"href\": \"/commerce-pwa-studio/guides/general-concepts/css-modules/\"\n      }}>{`CSS Modules`}</a>{` as much as possible.`}</p>\n    <p>{`For example, in our `}<inlineCode parentName=\"p\">{`exampleQuote.css`}</inlineCode>{`, we composed each color quote class with the `}<inlineCode parentName=\"p\">{`.qoute`}</inlineCode>{` class as shown in the following snippet:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.quote {\n    display: block;\n    font-size: 1.4em;\n    margin: 1em 1em 0.3em 0.6em;\n    quotes: '\\\\201C''\\\\201D''\\\\2018''\\\\2019';\n    text-decoration: none;\n    font-style: italic;\n    word-break: normal !important;\n    line-height: 1.25em;\n    padding: 0;\n    font-weight: 300;\n}\n.blackQuote {\n    composes: quote;\n    color: #333333;\n}\n.blueQuote {\n    composes: quote;\n    color: #007ab9;\n}\n...\n`}</code></pre>\n    <p>{`This ensures that for each colored quote class, we also apply the `}<inlineCode parentName=\"p\">{`.quote`}</inlineCode>{` class.`}</p>\n    <h2 {...{\n      \"id\": \"component-output\"\n    }}>{`Component output`}</h2>\n    <p>{`If you have followed along using the `}<inlineCode parentName=\"p\">{`ExampleQuote`}</inlineCode>{` component, you should see something like this displayed in the PWA Venia app:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-pwa-studio/assets/05cd8b9b928baf3e605e2d247065bb37/AddComponentOutput.svg\",\n        \"alt\": \"Add Component output\"\n      }}></img></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}