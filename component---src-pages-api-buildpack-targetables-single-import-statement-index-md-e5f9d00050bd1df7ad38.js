(self.webpackChunkcommerce_pwa_studio=self.webpackChunkcommerce_pwa_studio||[]).push([[2024],{11223:function(e,n,t){"use strict";t.r(n),t.d(n,{_frontmatter:function(){return l},default:function(){return d}});var o=t(22122),a=t(19756),r=(t(15007),t(64983)),m=t(99536),i=t(60836),s=["components"],l={},p={_frontmatter:l},u=m.Z;function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,r.mdx)(u,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"singleimportstatement"},"SingleImportStatement"),(0,r.mdx)(i.Z,{mdxType:"Docs"}),(0,r.mdx)("h2",{id:"examples"},"Examples"),(0,r.mdx)("p",null,"Code examples for using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"SingleImportStatement")," class."),(0,r.mdx)("h3",{id:"create-a-singleimportstatement-object"},"Create a ",(0,r.mdx)("inlineCode",{parentName:"h3"},"SingleImportStatement")," object"),(0,r.mdx)("p",null,"Pass in an import statement to the constructor to create a new ",(0,r.mdx)("inlineCode",{parentName:"p"},"SingleImportStatement")," object."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"const queryHookImport = new SingleImportStatement(\n  \"import { useQuery } from '@apollo/react-hooks'\"\n);\n")),(0,r.mdx)("p",null,"This creates an object with the following properties:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"{\n  statement: \"import { useQuery } from '@apollo/react-hooks'\",\n  binding: 'useQuery',\n  imported: 'useQuery'\n}\n")),(0,r.mdx)("h3",{id:"change-the-binding"},"Change the binding"),(0,r.mdx)("p",null,"Use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"changeBinding()")," function to rename the variable bound to the imported object."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},'const queryHookImport = new SingleImportStatement(\n  "import { useQuery } from \'@apollo/react-hooks\'"\n);\n\nconst queryHookImport2 = useQueryImport.changeBinding("useQuery2");\n')),(0,r.mdx)("p",null,"This creates an object with the following properties:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"{\n  statement: \"import { useQuery as useQuery2 } from '@apollo/react-hooks'\",\n  binding: 'useQuery2',\n  imported: 'useQuery'\n}\n")),(0,r.mdx)("h3",{id:"using-the-singleimportstatement-object"},"Using the ",(0,r.mdx)("inlineCode",{parentName:"h3"},"SingleImportStatement")," object"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"toString()")," value of a ",(0,r.mdx)("inlineCode",{parentName:"p"},"SingleImportStatement")," object is the value of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"binding")," property.\nUse this to reference the component's local name when adding custom code with Targetables."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-jsx"},"// You can skip 'import' and the class is able to understand what you mean\nlet Button = new SingleImportStatement(\"Button from './button'\");\n\n// later, you learn there is a conflict with the `Button` identifier,\n// so you generate a unique identifier\nButton = Button.changeBinding(generateUniqueIdentifier());\n\n// this renders the new identifier for your Button import in the final code\nconst jsx = `<${Button}>hello world</${Button}>`;\n")))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-api-buildpack-targetables-single-import-statement-index-md-e5f9d00050bd1df7ad38.js.map