{"version":3,"file":"component---src-pages-api-buildpack-environment-variables-index-md-c7059572805a0fd94923.js","mappings":"uSAOaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,yBAAuB,0BAE/B,wGAAyF,cAAGC,WAAW,IACnG,KAAQ,2CAAyC,mCACT,oDACf,cAAGA,WAAW,IACvC,KAAQ,6CAA2C,yCACL,0IAClD,eACE,GAAM,iDAA+C,kDAEvD,gGACA,oBACE,eAAIA,WAAW,MAAI,mDAAoD,cAAGA,WAAW,KACjF,KAAQ,kDACP,uBAAYA,WAAW,KAAG,sBAAuC,8BACtE,eAAIA,WAAW,MAAI,6BAA8B,cAAGA,WAAW,KAC3D,KAAQ,oHACP,uBAAYA,WAAW,KAAG,2BAA4C,oIACjB,uBAAYA,WAAW,MAAI,qBAAmC,kEAO1H,SAAC,IAAI,CAACD,QAAQ,SAGlB,CAEAH,EAAWK,gBAAiB,C","sources":["webpack://commerce-pwa-studio/./src/pages/api/buildpack/environment/variables/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/data/auto-generated/buildpack/reference/envVarDefinitions.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"environment-variables\"\n    }}>{`Environment variables`}</h1>\n    <p>{`Environment variable definitions are used for validation and documentation of the `}<a parentName=\"p\" {...{\n        \"href\": \"/guides/general-concepts/configuration/\"\n      }}>{`configuration management system`}</a>{` in PWA Studio.\nBuild scripts normally use the `}<a parentName=\"p\" {...{\n        \"href\": \"/api/buildpack/cli/load-environment-file/\"\n      }}>{`values set in the current environment`}</a>{`, but it is sometimes necessary to use the definitions themselves, such as when an extension defines its own global config variables.`}</p>\n    <h2 {...{\n      \"id\": \"access-environment-variable-definition-object\"\n    }}>{`Access environment variable definition object`}</h2>\n    <p>{`There are two ways to access the environment variable definitions object:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Third-party code should use the builtin target `}<a parentName=\"li\" {...{\n          \"href\": \"/api/buildpack/environment/definition-object/\"\n        }}><inlineCode parentName=\"a\">{`envVarDefinitions`}</inlineCode></a>{` when adding definitions.`}</li>\n      <li parentName=\"ul\">{`Core Buildpack code uses `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/pwa-studio/blob/develop/packages/pwa-buildpack/lib/Utilities/getEnvVarDefinitions.js\"\n        }}><inlineCode parentName=\"a\">{`getEnvVarDefinitions()`}</inlineCode></a>{`, which builds environment variable definitions for the project.\nIt starts with core variables listed below and then calls the `}<inlineCode parentName=\"li\">{`envVarDefinitions`}</inlineCode>{` target so installed extensions can add their own variables.`}</li>\n    </ul>\n    {/*\n     The reference doc content is generated automatically from the source code.\n     To update this section, update the doc blocks in the source code\n     */}\n\n    <Docs mdxType=\"Docs\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}