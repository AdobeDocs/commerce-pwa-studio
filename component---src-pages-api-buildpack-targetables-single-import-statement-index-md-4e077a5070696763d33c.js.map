{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/api/buildpack/targetables/SingleImportStatement/index.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+TASaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,yBADR,0BAUA,SAAC,IAAD,CAAMA,QAAQ,UACd,eACE,GAAM,YADR,aAGA,kDAAmC,uBAAYC,WAAW,KAAvB,yBAAnC,YACA,eACE,GAAM,yCADR,aAEgB,uBAAYA,WAAW,MAAvB,yBAFhB,YAGA,qFAAsE,uBAAYA,WAAW,KAAvB,yBAAtE,aACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,oHAML,4EACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,8HAQL,eACE,GAAM,sBADR,uBAGA,8BAAe,uBAAYA,WAAW,KAAvB,mBAAf,mEACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,2LAQL,4EACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,4IAQL,eACE,GAAM,0CADR,cAEiB,uBAAYA,WAAW,MAAvB,yBAFjB,YAGA,0BAAW,uBAAYA,WAAW,KAAvB,cAAX,gBAAiF,uBAAYA,WAAW,KAAvB,yBAAjF,gCAAkL,uBAAYA,WAAW,KAAvB,WAAlL,2GAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,scAgBTJ,EAAWK,gBAAiB","file":"component---src-pages-api-buildpack-targetables-single-import-statement-index-md-4e077a5070696763d33c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Docs from '/src/data/auto-generated/pwa-buildpack/lib/WebpackTools/targetables/SingleImportStatement.md';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"singleimportstatement\"\n    }}>{`SingleImportStatement`}</h1>\n    {\n      /*\n      The reference doc content is generated automatically from the source code.\n      To update this section, update the doc blocks in the source code\n      */\n    }\n\n    <Docs mdxType=\"Docs\" />\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Code examples for using the `}<inlineCode parentName=\"p\">{`SingleImportStatement`}</inlineCode>{` class.`}</p>\n    <h3 {...{\n      \"id\": \"create-a-singleimportstatement-object\"\n    }}>{`Create a `}<inlineCode parentName=\"h3\">{`SingleImportStatement`}</inlineCode>{` object`}</h3>\n    <p>{`Pass in an import statement to the constructor to create a new `}<inlineCode parentName=\"p\">{`SingleImportStatement`}</inlineCode>{` object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const queryHookImport = new SingleImportStatement(\n  \"import { useQuery } from '@apollo/react-hooks'\"\n);\n`}</code></pre>\n    <p>{`This creates an object with the following properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  statement: \"import { useQuery } from '@apollo/react-hooks'\",\n  binding: 'useQuery',\n  imported: 'useQuery'\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"change-the-binding\"\n    }}>{`Change the binding`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`changeBinding()`}</inlineCode>{` function to rename the variable bound to the imported object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const queryHookImport = new SingleImportStatement(\n  \"import { useQuery } from '@apollo/react-hooks'\"\n);\n\nconst queryHookImport2 = useQueryImport.changeBinding(\"useQuery2\");\n`}</code></pre>\n    <p>{`This creates an object with the following properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  statement: \"import { useQuery as useQuery2 } from '@apollo/react-hooks'\",\n  binding: 'useQuery2',\n  imported: 'useQuery'\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"using-the-singleimportstatement-object\"\n    }}>{`Using the `}<inlineCode parentName=\"h3\">{`SingleImportStatement`}</inlineCode>{` object`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`toString()`}</inlineCode>{` value of a `}<inlineCode parentName=\"p\">{`SingleImportStatement`}</inlineCode>{` object is the value of the `}<inlineCode parentName=\"p\">{`binding`}</inlineCode>{` property.\nUse this to reference the component's local name when adding custom code with Targetables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// You can skip 'import' and the class is able to understand what you mean\nlet Button = new SingleImportStatement(\"Button from './button'\");\n\n// later, you learn there is a conflict with the \\`Button\\` identifier,\n// so you generate a unique identifier\nButton = Button.changeBinding(generateUniqueIdentifier());\n\n// this renders the new identifier for your Button import in the final code\nconst jsx = \\`<\\${Button}>hello world</\\${Button}>\\`;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}