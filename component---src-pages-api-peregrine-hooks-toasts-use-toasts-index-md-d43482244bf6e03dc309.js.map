{"version":3,"file":"component---src-pages-api-peregrine-hooks-toasts-use-toasts-index-md-d43482244bf6e03dc309.js","mappings":"oNAWsBA,E,mFAFTC,EAAe,GAOtBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,aADR,gBAUA,SAAC,IAAD,CAAWA,QAAQ,eACnB,eACE,GAAM,YADR,aAGA,eACE,GAAM,kBADR,mBAGA,8BAAe,uBAAYC,WAAW,KAAvB,cAAf,8DACA,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,4BAAa,uBAAYC,WAAW,KAAvB,cAAb,QAA2E,uBAAYA,WAAW,KAAvB,eAA3E,2CAA6K,eAAIA,WAAW,KAAf,QAA7K,wBAAqO,uBAAYA,WAAW,KAAvB,YAArO,uBACK,uBAAYA,WAAW,KAAvB,eADL,iEAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,2WAwBTH,EAAWM,gBAAiB","sources":["webpack://commerce-pwa-studio/./src/pages/api/peregrine/hooks/toasts/useToasts/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-pwa-studio/commerce-pwa-studio/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Component from '/src/data/auto-generated/peregrine/lib/Toasts/useToasts.md';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"usetoasts\"\n    }}>{`useToasts()`}</h1>\n    {\n      /*\n      The reference doc content is generated automatically from the source code.\n      To update this section, update the doc blocks in the source code\n      */\n    }\n\n    <Component mdxType=\"Component\" />\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"adding-a-toast\"\n    }}>{`Adding a toast`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`addToast()`}</inlineCode>{` function from the API to add a toast to the toast store.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If an `}<inlineCode parentName=\"p\">{`onAction()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`onDismiss()`}</inlineCode>{` callback is provided, the implementer `}<em parentName=\"p\">{`must`}</em>{` call the passed in `}<inlineCode parentName=\"p\">{`remove()`}</inlineCode>{` function.\nIf the `}<inlineCode parentName=\"p\">{`onDismiss()`}</inlineCode>{` callback is not provided, the toast is removed immediately.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const { toasterState, api }  = useToast();\nconst { addToast } = api;\n\naddToast({\n  type: 'error',\n  message: 'An error occurred!',\n  actionText: 'Retry',\n  onAction: remove => {\n    async attemptRetry();\n    remove();\n  },\n  onDismiss: remove => {\n    async doSomethingOnDismiss();\n    remove();\n  },\n  icon: <Icon src={SadFaceIcon} />\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}